;/*!
;   @file
;
;   @brief DOS Macro Library
;
;   (c) osFree Project 2018-2022, <http://www.osFree.org>
;   for licence see licence.txt in root directory, or project website
;
;   @author Yuri Prokushev (yuri.prokushev@gmail.com)
;
;   This library based mostly on MASM 5.x and MASM 6.x documentation.
;
;*/


.8086

TERMINATE	MACRO
		INT	20H
		ENDM

FLUSH		MACRO	HANDLE
		MOV	BX, HANDLE
		MOV	AH,68H
		INT	21H
		ENDM

FILE_UNLOCK	MACRO	HANDLE,START,BYTES
		MOV	BX, HANDLE
		MOV	CX, WORD PTR START
		MOV	DX, WORD PTR START+2
		MOV	SI, WORD PTR BYTES
		MOV	DI, WORD PTR BYTES+2
		MOV	AL, 1
		MOV	AH, 5CH
		INT	21H
		ENDM

ABS_DISK_READ	MACRO	DISK,BUFFER,NUM_SECTORS,FIRST_SECTOR
		MOV	AL,DISK
		MOV	BX,OFFSET BUFFER
		MOV	CX,NUM_SECTORS
		MOV	DX,FIRST_SECTOR
		INT	25H
		POPF
		ENDM

ABS_DISK_WRITE	MACRO	DISK,BUFFER,NUM_SECTORS,FIRST_SECTOR
		MOV	AL,DISK
		MOV	BX,OFFSET BUFFER
		MOV	CX,NUM_SECTORS
		MOV	DX,FIRST_SECTOR
		INT	26H
		POPF
		ENDM


STAY_RESIDENT	MACRO	LAST_INSTRUC
		MOV	DX,OFFSET LAST_INSTRUC
		INC	DX
		INT	27H
		ENDM

TERMINATE_PROGRAM	MACRO
		XOR	AH,AH
		INT	21H
		ENDM

READ_KBD_AND_ECHO	MACRO
		MOV	AH,01H
		INT	21H
		ENDM

DISPLAY_CHAR	MACRO	CHARACTER
		MOV	DL,CHARACTER
		MOV	AH,02H
		INT	21H
		ENDM

@DispCh		MACRO	CHARACTER: VARARG
		MOV	AH, 02H
		FOR	ARG, <CHARACTER>
		MOV	DL, ARG
		INT	21H
		ENDM
		ENDM

AUX_INPUT	MACRO
		MOV	AH,03H
		INT	21H
		ENDM

AUX_OUTPUT	MACRO
		MOV	AH,04H
		INT	21H
		ENDM

PRINT_CHAR	MACRO	CHARACTER
		MOV	DL,CHARACTER
		MOV	AH,05H
		INT	21H
		ENDM

@PrtCh	MACRO	CHARACTER: VARARG
		MOV	AH, 05H
		FOR	ARG, <CHARACTER>
		MOV	DL, ARG
		INT	21H
		ENDM
		ENDM

DIR_CONSOLE_IO	MACRO	SWITCH
		MOV	DL,SWITCH
		MOV	AH,06H
		INT	21H
		ENDM

DIR_CONSOLE_INPUT	MACRO
		MOV	AH,07H
		INT	21H
		ENDM

READ_KBD	MACRO
		MOV	AH,08H
		INT	21H
		ENDM

DISPLAY		MACRO	STRING
		MOV	DX,OFFSET STRING
		MOV	AH,09H
		INT	21H
		ENDM

@DispStr	MACRO OFSET, SEGMNT
		MOV	DX,OFFSET OFSET
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AH,09H
		INT	21H
		ENDM

GET_STRING	MACRO	LIMIT,STRING
		MOV	DX,OFFSET STRING
		MOV	STRING,LIMIT
		MOV	AH,0AH
		INT	21H
		ENDM

@GetStr		MACRO	OFSET, TERMINATOR, LIMIT, SEGMNT
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	DX,OFFSET <OFSET>
		MOV	SI, DX
		IFNB	<LIMIT>
		MOV	STRING,LIMIT
		ENDIF
		MOV	AH,0AH
		INT	21H
		INC	SI
		MOV	BL, [SI]
		SUB	BH, BH
		INC	SI
		IFNB	TERMINATOR
		MOV	[BX+SI], TERMINATOR
		ENDIF
		ENDM

CHECK_KBD_STATUS	MACRO
		MOV	AH,0BH
		INT	21H
		ENDM

FLUSH_AND_READ_KBD	MACRO	SWITCH
		MOV	AL,SWITCH
		MOV	AH,0CH
		INT	21H
		ENDM

RESET_DISK	MACRO
		MOV	AH,0DH
		INT	21H
		ENDM

LFN_RESET_DISK	MACRO	DISK
		MOV	AX, 710DH
		MOV	CX, 2
		MOV	DX, DISK
		INT	21H
		ENDM


SELECT_DISK	MACRO	DISK
		MOV	DL,DISK
		SUB	DL, 65		; 'A'
		MOV	AH,0EH
		INT	21H
		ENDM

@SetDrv		MACRO	DRIVE
		MOV	DL,DRIVE
		MOV	AH,0EH
		INT	21H
		ENDM

OPEN		MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,0FH
		INT	21H
		ENDM

CLOSE		MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,10H
		INT	21H
		ENDM

SEARCH_FIRST	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,11H
		INT	21H
		ENDM

SEARCH_NEXT	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,12H
		INT	21H
		ENDM

DELETE		MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,13H
		INT	21H
		ENDM

READ_SEQ	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,14H
		INT	21H
		ENDM

WRITE_SEQ	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,15H
		INT	21H
		ENDM

CREATE		MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,16H
		INT	21H
		ENDM

RENAME		MACRO	FCB,NEWNAME
		MOV	DX,OFFSET FCB
		MOV	AH,17H
		INT	21H
		ENDM

CURRENT_DISK	MACRO
		MOV	AH,19H
		INT	21H
		ENDM

@GetDrv		MACRO
		MOV	AH,19H
		INT	21H
		ENDM

SET_DTA		MACRO	BUFFER
		MOV	DX,OFFSET BUFFER
		MOV	AH,1AH
		ENDM

@SetDTA		MACRO BUFFER, SEGMNT
		IFNB <SEGMNT>
		MOV AX, SEGMNT
		MOV DS, AX
		ENDIF
		MOV	DX,OFFSET BUFFER
		MOV	AH,1AH
		ENDM

DEF_DRIVE_DATA	MACRO
		MOV	AH,1BH
		INT	21H
		ENDM

DRIVE_DATA	MACRO	DRIVE
		MOV	DL,DRIVE
		MOV	AH,1CH
		INT	21H
		ENDM

READ_RAN	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,21H
		INT	21H
		ENDM

WRITE_RAN	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,22H
		INT	21H
		ENDM

FILE_SIZE	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,23H
		INT	21H
		ENDM

SET_RELATIVE_RECORD	MACRO	FCB
		MOV	DX,OFFSET FCB
		MOV	AH,24H
		INT	21H
		ENDM

SET_VECTOR	MACRO	INTERRUPT,HANDLER_START
		MOV	AL,INTERRUPT
		MOV	DX,OFFSET HANDLER_START
		MOV	AH,25H
		INT	21H
		ENDM

@SetInt		MACRO	INTERRUPT, VECTOR, SEGMNT
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AL,INTERRUPT
		MOV	DX,OFFSET VECTOR
		MOV	AH,25H
		INT	21H
		ENDM

CREATE_PSP	MACRO	SEG_ADDR
		MOV	DX,OFFSET SEG_ADDR
		MOV	AH,26H
		INT	21H
		ENDM

RAN_BLOCK_READ	MACRO	FCB,COUNT,REC_SIZE
		MOV	DX,OFFSET FCB
		MOV	CX,COUNT
		MOV	WORD PTR FCB[14],REC_SIZE
		MOV	AH,27H
		INT	21H
		ENDM

RAN_BLOCK_WRITE	MACRO	FCB,COUNT,REC_SIZE
		MOV	DX,OFFSET FCB
		MOV	CX,COUNT
		MOV	WORD PTR FCB[14],REC_SIZE
		MOV	AH,28H
		INT	21H
		ENDM

PARSE		MACRO	STRING,FCB
		MOV	SI,OFFSET STRING
		MOV	DI,OFFSET FCB
		PUSH	ES
		PUSH	DS
		POP	ES
		MOV	AL,0FH
		MOV	AH,29H
		INT	21H
		POP	ES
		ENDM

GET_DATE	MACRO
		MOV	AH,2AH
		INT	21H
		ENDM

@GetDate	MACRO
		MOV	AH,2AH
		INT	21H
		ENDM

SET_DATE	MACRO	YEAR,MONTH,DAY
		MOV	CX,YEAR
		MOV	DH,MONTH
		MOV	DL,DAY
		MOV	AH,2BH
		INT	21H
		ENDM

@SetDate	MACRO MONTH, DAY, YEAR
		MOV	CX,YEAR
		MOV	DH,MONTH
		MOV	DL,DAY
		MOV	AH,2BH
		INT	21H
		ENDM

GET_TIME	MACRO
		MOV	AH,2CH
		INT	21H
		ENDM

@GetTime	MACRO
		MOV	AH,2CH
		INT	21H
		ENDM

SET_TIME	MACRO	HOUR,MINUTES,SECONDS,HUNDREDTHS
		MOV	CH,HOUR
		MOV	CL,MINUTES
		MOV	DH,SECONDS
		MOV	DL,HUNDREDTHS
		MOV	AH,2DH
		INT	21H
		ENDM

@SetTime	MACRO	HOUR, MINUTES, SECONDS, HUNDREDTHS
		MOV	CH,HOUR
		MOV	CL,MINUTES
		MOV	DH,SECONDS
		MOV	DL,HUNDREDTHS
		MOV	AH,2DH
		INT	21H
		ENDM

VERIFY		MACRO	SWITCH
		MOV	AL,SWITCH
		MOV	AH,2EH
		INT	21H
		ENDM

GET_DTA		MACRO
		MOV	AH,2FH
		INT	21H
		ENDM

@GetDTA		MACRO
		MOV	AH,2FH
		INT	21H
		ENDM

GET_VERSION	MACRO
		MOV	AX,3000H			; AL=0 FOR DOS 5+ COMPATIBILITY
		INT	21H
		ENDM

@GetVer		MACRO
		MOV	AX,3000H			; AL=0 FOR DOS 5+ COMPATIBILITY
		INT	21H
		ENDM

KEEP_PROCESS	MACRO	RETURN_CODE,LAST_BYTE
		MOV	AL,RETURN_CODE
		MOV	DX,OFFSET LAST_BYTE
		MOV	CL,4
		SHR	DX,CL
		INC	DX
		MOV	AH,31H
		INT	21H
		ENDM

@TSR		MACRO	PARAGRAPHS, RETURN
		MOV	AL,RETURN
		MOV	DX,PARAGRAPHS
		MOV	AH,31H
		INT	21H
		ENDM

CTRL_C_CK	MACRO	ACTION,STATE
		MOV	AL,ACTION
		MOV	DL,STATE
		MOV	AH,33H
		INT	21H
		ENDM

GET_VECTOR	MACRO	INTERRUPT
		MOV	AL,INTERRUPT
		MOV	AH,35H
		INT	21H
		ENDM

@GetInt		MACRO	INTERRUPT
		MOV	AL,INTERRUPT
		MOV	AH,35H
		INT	21H
		ENDM

GET_DISK_SPACE	MACRO	DRIVE
		MOV	DL,DRIVE
		MOV	AH,36H
		INT	21H
		ENDM

@ChkDrv		MACRO	DRIVE
		MOV	DL,DRIVE
		MOV	AH,36H
		INT	21H
		ENDM


GET_COUNTRY	MACRO	COUNTRY,BUFFER
		LOCAL	GC_01
		MOV	DX,OFFSET BUFFER
		MOV	AX,COUNTRY
		CMP	AX,0FFH
		JL	GC_01
		MOV	AL,0FFH
		MOV	BX,COUNTRY
GC_01:		MOV	AH,38H
		INT	21H
		ENDM

GET_UPPERCASE_TABLE	MACRO COUNTRY, CODEPAGE, BUFFER, BUFLEN
		MOV	BX, CODEPAGE
		MOV	DX, COUNTRY
		MOV	CX, BUFLEN
		LES	DI, BUFFER
		MOV	AX, 6602H
		INT	21H
		ENDM

SET_COUNTRY	MACRO	COUNTRY
		LOCAL	SC_01
		MOV	DX,0FFFFH
		MOV	AX,COUNTRY
		CMP	AX,0FFH
		JL	SC_01
		MOV	AL,0FFH
		MOV	BX,COUNTRY
SC_01:		MOV	AH,38H
		INT	21H
		ENDM

MAKE_DIR	MACRO	PATH
		LDS	DX, PATH
		MOV	AH,39H
		INT	21H
		ENDM

@MkDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AH,39H
		INT	21H
		ENDM

LFN_MAKE_DIR	MACRO	PATH
		LDS	DX, PATH
		MOV	AX,7139H
		INT	21H
		ENDM

REM_DIR		MACRO	PATH
		LDS	DX, PATH
		MOV	AH,3AH
		INT	21H
		ENDM

@RmDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AH,3AH
		INT	21H
		ENDM

LFN_REM_DIR	MACRO	PATH
		LDS	DX, PATH
		MOV	AX, 713AH
		INT	21H
		ENDM

CHANGE_DIR	MACRO	PATH
		LDS	DX, PATH
		MOV	AH,3BH
		INT	21H
		ENDM

@ChDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AH,3BH
		INT	21H
		ENDM

LFN_CHANGE_DIR	MACRO	PATH
		LDS	DX, PATH
		MOV	AX,713BH
		INT	21H
		ENDM

CREATE_HANDLE	MACRO	PATH,ATTRIB
		LDS	DX,PATH
		MOV	CX,ATTRIB
		MOV	AH,3CH
		INT	21H
		ENDM

OPEN_HANDLE	MACRO	PATH,ACCESS
		LDS	DX,PATH
		MOV	AL,ACCESS
		MOV	AH,3DH
		INT	21H
		ENDM

CLOSE_HANDLE	MACRO	HANDLE
		MOV	BX,HANDLE
		MOV	AH,3EH
		INT	21H
		ENDM

@ClosFil	MACRO	HANDLE
		MOV	BX,HANDLE
		MOV	AH,3EH
		INT	21H
		ENDM

READ_HANDLE	MACRO	HANDLE,BUFFER,BYTES
		MOV	BX,HANDLE
		MOV	DX,OFFSET BUFFER
		MOV	CX,BYTES
		MOV	AH,3FH
		INT	21H
		ENDM

WRITE_HANDLE	MACRO	HANDLE,BUFFER,BYTES
		MOV	BX,HANDLE
		LDS	DX,BUFFER
		MOV	CX,BYTES
		MOV	AH,40H
		INT	21H
		ENDM

DELETE_ENTRY	MACRO	PATH
		LDS	DX, PATH
		MOV	AH,41H
		INT	21H
		ENDM

@DelFil		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AH,41H
		INT	21H
		ENDM

LFN_DELETE_ENTRY	MACRO	PATH
		LDS	DX, PATH
		MOV	AX,7141H
		INT	21H
		ENDM

MOVE_PTR	MACRO	HANDLE,HIGH,LOW,METHOD
		MOV	BX,HANDLE
		MOV	CX,HIGH
		MOV	DX,LOW
		MOV	AL,METHOD
		MOV	AH,42H
		INT	21H
		ENDM

@MovePtrAbs	MACRO	HANDLE, DISTANCE
		MOV	BX,HANDLE
		MOV	CX,WORD PTR DISTANCE+2
		MOV	DX,WORD PTR DISTANCE
		MOV	AX,4200H
		INT	21H
		ENDM

@MovePtrRel	MACRO	HANDLE, DISTANCE
		MOV	BX,HANDLE
		MOV	CX,WORD PTR DISTANCE+2
		MOV	DX,WORD PTR DISTANCE
		MOV	AX,4201H
		INT	21H
		ENDM

CHANGE_MODE	MACRO	PATH,ACTION,ATTRIB
		LDS	DX,PATH
		MOV	AL,ACTION
		MOV	CX,ATTRIB
		MOV	AH,43H
		INT	21H
		ENDM

LFN_CHANGE_MODE	MACRO	PATH,ACTION,ATTRIB
		LDS	DX,PATH
		MOV	BL,ACTION
		MOV	CX,ATTRIB
		MOV	AX,7143H
		INT	21H
		ENDM

IOCTL_DATA	MACRO	CODE,HANDLE
		MOV	BX,HANDLE
		MOV	AL,CODE
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_CHAR	MACRO	CODE,HANDLE,BUFFER
		MOV	BX,HANDLE
		MOV	DX,OFFSET BUFFER
		MOV	AL,CODE
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_STATUS	MACRO	CODE,DRIVE,BUFFER
		MOV	BL,DRIVE
		MOV	DX,OFFSET BUFFER
		MOV	AL,CODE
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_STATUS	MACRO	CODE,HANDLE
		MOV	BX,HANDLE
		MOV	AL,CODE
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_CHANGE	MACRO	DRIVE
		MOV	BL,DRIVE
		MOV	AL,08H
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_RBLOCK	MACRO	DRIVE
		MOV	BL,DRIVE
		MOV	AL,09H
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_RHANDLE	MACRO	HANDLE
		MOV	BX,HANDLE
		MOV	AL,0AH
		MOV	AH,44H
		INT	21H
		ENDM

IOCTL_RETRY	MACRO	RETRIES,WAIT
		MOV	DX,RETRIES
		MOV	CX,WAIT
		MOV	AL,0BH
		MOV	AH,44H
		INT	21H
		ENDM

GENERIC_IOCTL_HANDLES	MACRO HANDLE,FUNCTION,CATEGORY,BUFFER
		MOV    CH,05H
		MOV	CL,FUNCTION
		MOV	DX,OFFSET BUFFER
		MOV	BX,HANDLE
		MOV	AH,44H
		MOV	AL,0CH
		INT	21H
		ENDM

GENERIC_IOCTL_BLOCK	MACRO	DRIVE_NUM,FUNCTION,CATEGORY,PARM_BLK
		MOV	CH,08H
		MOV	CL,FUNCTION
		MOV	DX,OFFSET PARM_BLK - 1
		MOV	BX,DRIVE_NUM
		MOV	AH,44H
		MOV	AL,0DH
		INT	21H
		ENDM

IOCTL_GET_DRIVE_MAP	MACRO	LOGICAL_DRV
		MOV	BX,LOGICAL_DRV
		MOV	AH,44H
		MOV	AL,0EH
		INT	21H
		ENDM

IOCTL_SET_DRIVE_MAP	MACRO	LOGICAL_DRV
		MOV	BX,LOGICAL_DRV
		MOV	AH,44H
		MOV	AL,0FH
		INT	21H
		ENDM

XDUP		MACRO	HANDLE
		MOV	BX,HANDLE
		MOV	AH,45H
		INT	21H
		ENDM

XDUP2		MACRO	HANDLE1,HANDLE2
		MOV	BX,HANDLE1
		MOV	CX,HANDLE2
		MOV	AH,46H
		INT	21H
		ENDM

GET_DIR		MACRO	DRIVE,BUFFER
		MOV	DL,DRIVE
		MOV	SI,BUFFER
		MOV	AH,47H
		INT	21H
		ENDM

ALLOCATE_MEMORY	MACRO	BYTES
		MOV	BX,BYTES
		MOV	CL,4
		SHR	BX,CL
		INC	BX
		MOV	AH,48H
		INT	21H
		ENDM

FREE_MEMORY	MACRO	SEG_ADDR
		MOV	AX,SEG_ADDR
		MOV	ES,AX
		MOV	AH,49H
		INT	21H
		ENDM

SET_BLOCK	MACRO	LAST_BYTE
		MOV	BX,OFFSET LAST_BYTE
		MOV	CL,4
		SHR	BX,CL
		ADD	BX,17
		MOV	AH,4AH
		INT	21H
		MOV	AX,BX
		SHL	AX,CL
		DEC	AX
		MOV	SP,AX
		MOV	BP,SP
		ENDM

EXEC		MACRO	PATH,COMMAND,PARMS
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS
		MOV	WORD PTR PARMS[02H],OFFSET COMMAND
		MOV	WORD PTR PARMS[04H],CS
		MOV	WORD PTR PARMS[06H],5CH
		MOV	WORD PTR PARMS[08H],ES
		MOV	WORD PTR PARMS[0AH],6CH
		MOV	WORD PTR PARMS[0CH],ES
		MOV	AL,0
		MOV	AH,4BH
		INT	21H
		ENDM

EXEC_OVL	MACRO	PATH,PARMS,SEG_ADDR
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS
		MOV	PARMS,SEG_ADDR
		MOV	PARMS[02H],SEG_ADDR
		MOV	AL,3
		MOV	AH,4BH
		INT	21H
		ENDM

@Exec		MACRO	PATH, PARMS, SEGPATH, SEGPARMS, OVERLAY
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS

		IFNB <SEGPATH>
		MOV	AX, SEGPATH
		MOV	DS, AX
		ENDIF

		IFNB <SEGPARAMS>
		MOV	AX, SEGPARAMS
		MOV	ES, AX
		ENDIF

		IFB	<OVERLAY>
		XOR	AX,AX
		ELSE
		MOV	AL,3
		ENDIF
		MOV	AH,4BH
		INT	21H
		ENDM

END_PROCESS	MACRO	RETURN_CODE
		MOV	AL,RETURN_CODE
		MOV	AH,4CH
		INT	21H
		ENDM

@Exit		MACRO	RETURN
		MOV	AL,RETURN
		MOV	AH,4CH
		INT	21H
		ENDM

RET_CODE	MACRO
		MOV	AH,4DH
		INT	21H
		ENDM

@GetRet		MACRO
		MOV	AH,4DH
		INT	21H
		ENDM

FIND_FIRST_FILE	MACRO	PATH,ATTRIB
		MOV	DX,OFFSET PATH
		MOV	CX,ATTRIB
		MOV	AH,4EH
		INT	21H
		ENDM

FIND_NEXT_FILE	MACRO
		MOV	AH,4FH
		INT	21H
		ENDM

@GetNext	MACRO
		MOV	AH,4FH
		INT	21H
		ENDM

GET_VERIFY	MACRO
		MOV	AH,54H
		INT	21H
		ENDM

RENAME_FILE	MACRO	OLD_PATH,NEW_PATH
		LDS	DX, OLD_PATH
		LES	DI, NEW_PATH
		MOV	AH,56H
		INT	21H
		ENDM

LFN_RENAME_FILE	MACRO	OLD_PATH,NEW_PATH
		LDS	DX, OLD_PATH
		LES	DI, NEW_PATH
		MOV	AX,7156H
		INT	21H
		ENDM

GET_SET_DATE_TIME	MACRO	HANDLE,ACTION,TIME,DATE
		MOV	BX,HANDLE
		MOV	AL,ACTION
		MOV	CX,WORD PTR TIME
		MOV	DX,WORD PTR DATE
		MOV	AH,57H
		INT	21H
		ENDM

ALLOC_STRAT	MACRO	CODE,STRATEGY
		MOV	BX,STRATEGY
		MOV	AL,CODE
		MOV	AH,58H
		INT	21H
		ENDM

GET_ERROR	MACRO
		MOV	AH,59H
		XOR	BX, BX
		INT	21H
		ENDM

CREATE_TEMP	MACRO	PATHNAME,ATTRIB
		MOV	CX,ATTRIB
		MOV	DX,OFFSET PATHNAME
		MOV	AH,5AH
		INT	21H
		ENDM

CREATE_NEW	MACRO	PATHNAME,ATTRIB
		MOV	CX,ATTRIB
		MOV	DX,OFFSET PATHNAME
		MOV	AH,5BH
		INT	21H
		ENDM

LOCK_FILE	MACRO	HANDLE,START,BYTES
		MOV	BX,HANDLE
		MOV	CX,WORD PTR START
		MOV	DX,WORD PTR START+2
		MOV	SI,WORD PTR BYTES
		MOV	DI,WORD PTR BYTES+2
		MOV	AL,0
		MOV	AH,5CH
		INT	21H
		ENDM

UNLOCK		MACRO	HANDLE,START,BYTES
		MOV	BX,HANDLE
		MOV	CX,WORD PTR START
		MOV	DX,WORD PTR START+2
		MOV	SI,WORD PTR BYTES
		MOV	DI,WORD PTR BYTES+2
		MOV	AL,1
		MOV	AH,5CH
		INT	21H
		ENDM

GET_MACHINE_NAME	MACRO	BUFFER
		MOV	DX,OFFSET BUFFER
		MOV	AL,0
		MOV	AH,5EH
		INT	21H
		ENDM

PRINTER_SETUP	MACRO	INDEX,LGTH,STRING
		MOV	BX,INDEX
		MOV	CX,LGTH
		MOV	DX,OFFSET STRING
		MOV	AL,2
		MOV	AH,5EH
		INT	21H
		ENDM

GET_LIST	MACRO	INDEX,LOCAL,REMOTE
		MOV	BX,INDEX
		MOV	SI,OFFSET LOCAL
		MOV	DI,OFFSET REMOTE
		MOV	AL,2
		MOV	AH,5FH
		INT	21H
		ENDM

REDIR		MACRO	DEVICE,VALUE,SOURCE,DESTINATION
		MOV	BL,DEVICE
		MOV	CX,VALUE
		MOV	SI,OFFSET SOURCE
		MOV	ES,SEG DESTINATION
		MOV	DI,OFFSET DESTINATION
		MOV	AL,03H
		MOV	AH,5FH
		INT	21H
		ENDM

CANCEL_REDIR	MACRO	LOCAL
		MOV	SI,OFFSET LOCAL
		MOV	AL,4
		MOV	AH,5FH
		INT	21H
		ENDM

GET_PSP		MACRO
		MOV	AH,62H
		INT	21H
		ENDM


DISPLAY_ASCIZ	MACRO	ASCIZ_STRING
		LOCAL	SEARCH,FOUND_IT
		MOV	BX,OFFSET ASCIZ_STRING

		SEARCH:
		CMP	BYTE PTR [BX],0
		JE	FOUND_IT
		INC	BX
		JMP SHORT SEARCH

FOUND_IT:
		MOV	BYTE PTR [BX],"$"
		DISPLAY	ASCIZ_STRING
		MOV	BYTE PTR [BX],0
		DISPLAY_CHAR	0DH
		DISPLAY_CHAR	0AH
		ENDM

MOVE_STRING	MACRO	SOURCE,DESTINATION,COUNT
		PUSH	ES
		PUSH	DS
		POP	ES
		ASSUME	ES:CODE
		MOV	SI,OFFSET SOURCE
		MOV	DI,OFFSET DESTINATION
		MOV	CX,COUNT
	REP	MOVS	ES:DESTINATION,SOURCE
		ASSUME	ES:NOTHING
		POP	ES
		ENDM

CONVERT		MACRO	VALUE,BASE,DESTINATION
		LOCAL	TABLE,START
		JMP	START
TABLE		DB	"0123456789ABCDEF"

START:
		PUSH	AX
		PUSH	BX
		PUSH	DX
		MOV	AL,VALUE
		XOR	AH,AH
		XOR	BX,BX
		DIV	BASE
		MOV	BL,AL
		MOV	AL,CS:TABLE[BX]
		MOV	DESTINATION,AL
		MOV	BL,AH
		MOV	AL,CS:TABLE[BX]
		MOV	DESTINATION[1],AL
		POP	DX
		POP	BX
		POP	AX
		ENDM

CONVERT_TO_BINARY	MACRO  STRING,NUMBER,VALUE
		LOCAL	TEN,START,CALC,MULT,NO_MULT
		JMP	START
TEN		DB	10

START:
		MOV	VALUE,0
		XOR	CX,CX
		MOV	CL,NUMBER
		XOR	SI,SI

CALC:
		XOR	AX,AX
		MOV	AL,STRING[SI]
		SUB	AL,48
		CMP	CX,2
		JL	NO_MULT
		PUSH	CX
		DEC	CX

MULT:
		MUL	CS:TEN
		LOOP	MULT
		POP	CX

NO_MULT:
		ADD	VALUE,AX
		INC	SI
		LOOP	CALC
		ENDM

CONVERT_DATE	MACRO	DIR_ENTRY
		MOV	DX,WORD PTR DIR_ENTRY[24]
		MOV	CL,5
		SHR	DL,CL
		MOV	DH,DIR_ENTRY[24]
		AND	DH,1FH
		XOR	CX,CX
		MOV	CL,DIR_ENTRY[25]
		SHR	CL,1
		ADD	CX,1980
		ENDM

PACK_DATE	MACRO	DATE
		LOCAL	SET_BIT
;
  ON ENTRY: DH=DAY, DL=MONTH, CX=(YEAR-1980)
;
		SUB	CX,1980
		PUSH	CX
		MOV	DATE,DH
		MOV	CL,5
		SHL	DL,CL
		POP	CX
		JNC	SET_BIT
		OR	CL,80H

SET_BIT:
		OR	DATE,DL
		ROL	CL,1
		MOV	DATE[1],CL
		ENDM
;
if 0
@GetKey echo, cc, clear
@Read ofset, bytes, handle, segmnt
@Write ofset, bytes, handle, segmnt
@MakFil path, atrib, segmnt, kind
@OpenFil path, access, segmnt
@MoveFil old, new, segold, segnew
@GetFirst path, atrib, segmnt
@GetDir buffer, drive, segmnt
@FreeBlok segmnt
@GetBlok graphs
@ModBlok graphs, segmnt
@GetFilSz handle
endif