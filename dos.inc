;/*!
;   @file
;
;   @brief DOS Macro Library
;
;   (c) osFree Project 2018-2022, <http://www.osFree.org>
;   for licence see licence.txt in root directory, or project website
;
;   @author Yuri Prokushev (yuri.prokushev@gmail.com)
;
;   This library based mostly on MASM 5.x and MASM 6.x documentation.
;
;   Documentation: http://osfree.org/doku/en:docs:macrolib
;
;*/


IFNDEF DOS_DEFINED

DOS_DEFINED EQU 1

.8086

		INCLUDE	mac.inc

@DosCall	MACRO	FUNC
		IF (.TYPE (FUNC)) AND 00000100b ; Constant
			IF TYPE (FUNC) EQ 1
				MOV	AH,FUNC
			ELSEIF TYPE (FUNC) EQ 2	; WORD (2 BYTE)
				MOV	AX,FUNC
			ENDIF
		ELSEIF TYPE (FUNC) EQ 1	; BYTES (1 BYTE)
			MOV	AH,FUNC
		ELSEIF TYPE (FUNC) EQ 2	; WORD (2 BYTE)
			IFDIFI	<FUNC>, <AX>
				MOV	AX,FUNC
			ENDIF
		ELSE
			.ERR Unsupported argument type
		ENDIF
		INT	21H
		ENDM

TERMINATE	MACRO
		INT	20H
		ENDM

FLUSH		MACRO	HANDLE
		MOV	BX, HANDLE
		@DosCall 68H
		ENDM

FILE_UNLOCK	MACRO	HANDLE,START,BYTES
		MOV	BX, HANDLE
		MOV	CX, WORD PTR START
		MOV	DX, WORD PTR START+2
		MOV	SI, WORD PTR BYTES
		MOV	DI, WORD PTR BYTES+2
		MOV	AL, 1
		@DosCall 5CH
		ENDM

ABS_DISK_READ	MACRO	DISK,BUFFER,NUM_SECTORS,FIRST_SECTOR
		MOV	AL,DISK
		MOV	BX,OFFSET BUFFER
		MOV	CX,NUM_SECTORS
		MOV	DX,FIRST_SECTOR
		INT	25H
		POPF
		ENDM

ABS_DISK_WRITE	MACRO	DISK,BUFFER,NUM_SECTORS,FIRST_SECTOR
		MOV	AL,DISK
		MOV	BX,OFFSET BUFFER
		MOV	CX,NUM_SECTORS
		MOV	DX,FIRST_SECTOR
		INT	26H
		POPF
		ENDM


STAY_RESIDENT	MACRO	LAST_INSTRUC
		MOV	DX,OFFSET LAST_INSTRUC
		INC	DX
		INT	27H
		ENDM

TERMINATE_PROGRAM	MACRO
		@DosCall 00H
		ENDM

READ_KBD_AND_ECHO	MACRO
		@DosCall 01H
		ENDM

DISPLAY_CHAR	MACRO	CHARACTER
		MOV	DL,CHARACTER
		@DosCall 02H
		ENDM

@DispCh		MACRO	CHARACTER: VARARG
		MOV	AH, 02H
		IFNB <CHARACTER>
			FOR	ARG, <CHARACTER>
			MOV	DL, ARG
			INT	21H
			ENDM
		ELSE
			@DosCall 02h
		ENDIF
		ENDM

AUX_INPUT	MACRO
		@DosCall 03H
		ENDM

AUX_OUTPUT	MACRO
		@DosCall 04H
		ENDM

PRINT_CHAR	MACRO	CHARACTER
		MOV	DL,CHARACTER
		@DosCall 05H
		ENDM

@PrtCh	MACRO	CHARACTER: VARARG
		MOV	AH, 05H
		FOR	ARG, <CHARACTER>
		MOV	DL, ARG
		INT	21H
		ENDM
		ENDM

DIR_CONSOLE_IO	MACRO	SWITCH
		MOV	DL,SWITCH
		@DosCall 06H
		ENDM

DIR_CONSOLE_INPUT	MACRO
		@DosCall 07H
		ENDM

READ_KBD	MACRO
		@DosCall 08H
		ENDM

DISPLAY		MACRO	STRING, SEGMNT
		IFDIFI	<STRING>, <DX>
			@LOADARG	DX, STRING
		ENDIF
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		@DosCall 09H
		ENDM

@DispStr	MACRO STRING, SEGMNT
		IFDIFI	<STRING>, <DX>
			@LOADARG	DX, STRING
		ENDIF
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		@DosCall 09H
		ENDM

GET_STRING	MACRO	LIMIT,STRING
		MOV	DX,OFFSET STRING
		MOV	STRING,LIMIT
		@DosCall 0AH
		ENDM

@GetStr		MACRO	OFSET, TERMINATOR, LIMIT, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		MOV	DX,OFFSET <OFSET>
		MOV	SI, DX
		IFNB	<LIMIT>
			MOV	STRING,LIMIT
		ENDIF
		@DosCall 0AH
		INC	SI
		MOV	BL, [SI]
		SUB	BH, BH
		INC	SI
		IFNB	TERMINATOR
			MOV	[BX+SI], TERMINATOR
		ENDIF
		ENDM

CHECK_KBD_STATUS	MACRO
		@DosCall 0BH
		ENDM

FLUSH_AND_READ_KBD	MACRO	SWITCH
		MOV	AL,SWITCH
		@DosCall 0CH
		ENDM

RESET_DISK	MACRO
		@DosCall 0DH
		ENDM

LFN_RESET_DISK	MACRO	DISK
		MOV	AX, 710DH
		MOV	CX, 2
		MOV	DX, DISK
		INT	21H
		ENDM


SELECT_DISK	MACRO	DISK
		MOV	DL,DISK
		SUB	DL, 65		; 'A'
		@DosCall 0EH
		INT	21H
		ENDM

@SetDrv		MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 0EH
		ENDM

OPEN		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 0FH
		ENDM

CLOSE		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 10H
		ENDM

SEARCH_FIRST	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 11H
		ENDM

SEARCH_NEXT	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 12H
		ENDM

DELETE		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 13H
		ENDM

READ_SEQ	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 14H
		ENDM

WRITE_SEQ	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 15H
		ENDM

CREATE		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 16H
		ENDM

RENAME		MACRO	FCB,NEWNAME
		MOV	DX,OFFSET FCB
		@DosCall 17H
		ENDM

CURRENT_DISK	MACRO
		@DosCall 19H
		ENDM

@GetDrv		MACRO
		@DosCall 19H
		ENDM

SET_DTA		MACRO	BUFFER
		MOV	DX,OFFSET BUFFER
		@DosCall 1AH
		ENDM

@SetDTA		MACRO BUFFER, SEGMNT
		IFNB <SEGMNT>
			MOV AX, SEGMNT
			MOV DS, AX
		ENDIF
		IFNB <BUFFER>
			MOV	DX,OFFSET BUFFER
		ENDIF
		@DosCall 1AH
		ENDM

DEF_DRIVE_DATA	MACRO
		@DosCall 1BH
		ENDM

DRIVE_DATA	MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 1CH
		ENDM

READ_RAN	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 21H
		ENDM

WRITE_RAN	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 22H
		ENDM

FILE_SIZE	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 23H
		ENDM

SET_RELATIVE_RECORD	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 24H
		ENDM

SET_VECTOR	MACRO	INTERRUPT,HANDLER_START
		MOV	AL,INTERRUPT
		MOV	DX,OFFSET HANDLER_START
		@DosCall 25H
		ENDM

@SetInt		MACRO	INTERRUPT, VECTOR, SEGMNT
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AL,INTERRUPT
		MOV	DX,OFFSET VECTOR
		@DosCall 25H
		ENDM

CREATE_PSP	MACRO	SEG_ADDR
		MOV	DX,OFFSET SEG_ADDR
		@DosCall 26H
		ENDM

RAN_BLOCK_READ	MACRO	FCB,COUNT,REC_SIZE
		MOV	DX,OFFSET FCB
		MOV	CX,COUNT
		MOV	WORD PTR FCB[14],REC_SIZE
		@DosCall 27H
		ENDM

RAN_BLOCK_WRITE	MACRO	FCB,COUNT,REC_SIZE
		MOV	DX,OFFSET FCB
		MOV	CX,COUNT
		MOV	WORD PTR FCB[14],REC_SIZE
		@DosCall 28H
		ENDM

PARSE		MACRO	STRING,FCB
		MOV	SI,OFFSET STRING
		MOV	DI,OFFSET FCB
		PUSH	ES
		PUSH	DS
		POP	ES
		MOV	AL,0FH
		@DosCall 29H
		POP	ES
		ENDM

GET_DATE	MACRO
		@DosCall 2AH
		ENDM

@GetDate	MACRO
		@DosCall 2AH
		ENDM

SET_DATE	MACRO	YEAR,MONTH,DAY
		MOV	CX,YEAR
		MOV	DH,MONTH
		MOV	DL,DAY
		@DosCall 2BH
		ENDM

@SetDate	MACRO MONTH, DAY, YEAR
		MOV	CX,YEAR
		MOV	DH,MONTH
		MOV	DL,DAY
		@DosCall 2BH
		ENDM

GET_TIME	MACRO
		@DosCall 2CH
		ENDM

@GetTime	MACRO
		@DosCall 2CH
		ENDM

SET_TIME	MACRO	HOUR,MINUTES,SECONDS,HUNDREDTHS
		MOV	CH,HOUR
		MOV	CL,MINUTES
		MOV	DH,SECONDS
		MOV	DL,HUNDREDTHS
		@DosCall 2DH
		ENDM

@SetTime	MACRO	HOUR, MINUTES, SECONDS, HUNDREDTHS
		MOV	CH,HOUR
		MOV	CL,MINUTES
		MOV	DH,SECONDS
		MOV	DL,HUNDREDTHS
		@DosCall 2DH
		ENDM

VERIFY		MACRO	SWITCH
		MOV	AL,SWITCH
		@DosCall 2EH
		ENDM

GET_DTA		MACRO
		@DosCall 2FH
		ENDM

@GetDTA		MACRO
		@DosCall 2FH
		ENDM

GET_VERSION	MACRO
		@DosCall 3000H			; AL=0 FOR DOS 5+ COMPATIBILITY
		ENDM

@GetVer		MACRO
		@DosCall 3000H			; AL=0 FOR DOS 5+ COMPATIBILITY
		ENDM

KEEP_PROCESS	MACRO	RETURN_CODE,LAST_BYTE
		MOV	AL,RETURN_CODE
		MOV	DX,OFFSET LAST_BYTE
		MOV	CL,4
		SHR	DX,CL
		INC	DX
		@DosCall 31H
		ENDM

@TSR		MACRO	PARAGRAPHS, RETURN
		MOV	AL,RETURN
		MOV	DX,PARAGRAPHS
		@DosCall 31H
		ENDM

CTRL_C_CK	MACRO	ACTION,STATE
		IFNB <ACTION>
			MOV	AL,ACTION
		ENDIF
		IFNB <STATE>
			MOV	DL,STATE
		ENDIF
		@DosCall 33H
		ENDM

GET_VECTOR	MACRO	INTERRUPT
		MOV	AL,INTERRUPT
		@DosCall 35H
		ENDM

@GetInt		MACRO	INTERRUPT
		MOV	AL,INTERRUPT
		@DosCall 35H
		ENDM

GET_DISK_SPACE	MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 36H
		ENDM

@ChkDrv		MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 36H
		ENDM


GET_COUNTRY	MACRO	COUNTRY,BUFFER
		LOCAL	GC_01
		MOV	DX,OFFSET BUFFER
		MOV	AX,COUNTRY
		CMP	AX,0FFH
		JL	GC_01
		MOV	AL,0FFH
		MOV	BX,COUNTRY
GC_01:		@DosCall 38H
		ENDM

GET_UPPERCASE_TABLE	MACRO COUNTRY, CODEPAGE, BUFFER, BUFLEN
		MOV	BX, CODEPAGE
		MOV	DX, COUNTRY
		MOV	CX, BUFLEN
		LES	DI, BUFFER
		@DosCall 6602H
		ENDM

SET_COUNTRY	MACRO	COUNTRY
		LOCAL	SC_01
		MOV	DX,0FFFFH
		MOV	AX,COUNTRY
		CMP	AX,0FFH
		JL	SC_01
		MOV	AL,0FFH
		MOV	BX,COUNTRY
SC_01:		@DosCall 38H
		ENDM

MAKE_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 39H
		ENDM

@MkDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		@DosCall 39H
		ENDM

LFN_MAKE_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 7139H
		ENDM

REM_DIR		MACRO	PATH
		LDS	DX, PATH
		@DosCall 3AH
		ENDM

@RmDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		@DosCall 3AH
		ENDM

LFN_REM_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 713AH
		ENDM

CHANGE_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 3BH
		ENDM

@ChDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		@DosCall 3BH
		ENDM

LFN_CHANGE_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 713BH
		ENDM

CREATE_HANDLE	MACRO	PATH,ATTRIB
		LDS	DX,PATH
		MOV	CX,ATTRIB
		@DosCall 3CH
		ENDM

@MakFil		MACRO	PATH, ATTRIB, SEGMNT, KIND
		IFNB	<SEGMNT>
			MOV	AX, SEGMNT
			MOV	DS, AX
		ENDIF
		IFNB	<PATH>
			MOV	DX,PATH
		ENDIF
		IFNB	<ATTRIB>
			MOV	CX,ATTRIB
		ENDIF
		@DosCall 3CH
		ENDM

OPEN_HANDLE	MACRO	PATH,ACCESS
		LDS	DX,PATH
		MOV	AL,ACCESS
		@DosCall 3DH
		ENDM

@OpenFil	MACRO	PATH, ACCESS, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, SEGMNT
			MOV	DS, AX
		ENDIF
		IFNB	<PATH>
			MOV	DX,PATH
		ENDIF
		IFNB	<ACCESS>
			MOV	AL,ACCESS
		ENDIF
		@DosCall 3DH
		ENDM

CLOSE_HANDLE	MACRO	HANDLE
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF
		@DosCall 3EH
		ENDM

@ClosFil	MACRO	HANDLE
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF
		@DosCall 3EH
		ENDM

READ_HANDLE	MACRO	HANDLE,BUFFER,BYTES
		MOV	BX,HANDLE
		MOV	DX,OFFSET BUFFER
		MOV	CX,BYTES
		@DosCall 3FH
		ENDM

@Read		MACRO	OFSET, BYTES, HANDLE, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, SEGMNT
			MOV	DS, AX
		ENDIF

		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF

		IFNB	<OFSET>
			MOV	DX,OFFSET OFSET
		ENDIF

		IFNB	<BYTES>
			MOV	CX,BYTES
		ENDIF
		@DosCall 3FH
		ENDM


WRITE_HANDLE	MACRO	HANDLE,BUFFER,BYTES
		MOV	BX,HANDLE
		LDS	DX,BUFFER
		MOV	CX,BYTES
		@DosCall 40H
		ENDM

@Write		MACRO	OFSET, BYTES, HANDLE, SEGMNT
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF

		IFNB	<OFSET>
			LDS	DX,OFSET
		ENDIF

		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF

		IFNB	<BYTES>
			MOV	CX,BYTES
		ENDIF

		@DosCall 40H
		ENDM

DELETE_ENTRY	MACRO	PATH
		LDS	DX, PATH
		@DosCall 41H
		ENDM

@DelFil		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		@DosCall 41H
		ENDM

LFN_DELETE_ENTRY	MACRO	PATH
		LDS	DX, PATH
		@DosCall 7141H
		ENDM

MOVE_PTR	MACRO	HANDLE,HIGH,LOW,METHOD
		MOV	BX,HANDLE
		MOV	CX,HIGH
		MOV	DX,LOW
		MOV	AL,METHOD
		@DosCall 42H
		ENDM

@MovePtr	MACRO	HANDLE,HIGH,LOW,METHOD
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF
		IFNB	<HIGH>
			MOV	CX,HIGH
		ENDIF
		IFNB	<LOW>
			MOV	DX,LOW
		ENDIF
		IFNB	<METHOD>
			MOV	AL,METHOD
		ENDIF
		@DosCall 42H
		ENDM


@MovePtrAbs	MACRO	HANDLE, DISTANCE
		MOV	BX,HANDLE
		MOV	CX,WORD PTR DISTANCE+2
		MOV	DX,WORD PTR DISTANCE
		@DosCall 4200H
		ENDM

@MovePtrRel	MACRO	HANDLE, DISTANCE
		MOV	BX,HANDLE
		MOV	CX,WORD PTR DISTANCE+2
		MOV	DX,WORD PTR DISTANCE
		@DosCall 4201H
		ENDM

@GetFilSz	MACRO	HANDLE
		MOV	BX, HANDLE
		SUB	CX, CX
		MOV	DX, CX
		@DosCall 4201H
		PUSH	AX
		PUSH	DX
		MOV	DX, CX
		@DosCall 4202H
		POP	CX
		MOV	BX, DX
		POP	DX
		PUSH	AX
		PUSH	BX
		MOV	BX, HANDLE
		@DosCall 4200H
		POP	DX
		POP	AX
		ENDM

CHANGE_MODE	MACRO	PATH,ACTION,ATTRIB
		LDS	DX,PATH
		MOV	AL,ACTION
		MOV	CX,ATTRIB
		@DosCall 43H
		ENDM

LFN_CHANGE_MODE	MACRO	PATH,ACTION,ATTRIB
		LDS	DX,PATH
		MOV	BL,ACTION
		MOV	CX,ATTRIB
		@DosCall 7143H
		ENDM

IOCTL_DATA	MACRO	CODE,HANDLE
		MOV	BX,HANDLE
		MOV	AL,CODE
		@DosCall 44H
		ENDM

IOCTL_CHAR	MACRO	CODE,HANDLE,BUFFER
		MOV	BX,HANDLE
		MOV	DX,OFFSET BUFFER
		MOV	AL,CODE
		@DosCall 44H
		ENDM

IOCTL_STATUS	MACRO	CODE,DRIVE,BUFFER
		MOV	BL,DRIVE
		MOV	DX,OFFSET BUFFER
		MOV	AL,CODE
		@DosCall 44H
		ENDM

IOCTL_STATUS	MACRO	CODE,HANDLE
		MOV	BX,HANDLE
		MOV	AL,CODE
		@DosCall 44H
		ENDM

IOCTL_CHANGE	MACRO	DRIVE
		MOV	BL,DRIVE
		MOV	AL,08H
		@DosCall 44H
		ENDM

IOCTL_RBLOCK	MACRO	DRIVE
		MOV	BL,DRIVE
		MOV	AL,09H
		@DosCall 44H
		ENDM

IOCTL_RHANDLE	MACRO	HANDLE
		MOV	BX,HANDLE
		MOV	AL,0AH
		@DosCall 44H
		ENDM

IOCTL_RETRY	MACRO	RETRIES,WAIT
		MOV	DX,RETRIES
		MOV	CX,WAIT
		MOV	AL,0BH
		@DosCall 44H
		ENDM

GENERIC_IOCTL_HANDLES	MACRO HANDLE,FUNCTION,CATEGORY,BUFFER
		MOV    CH,05H
		MOV	CL,FUNCTION
		MOV	DX,OFFSET BUFFER
		MOV	BX,HANDLE
		MOV	AL,0CH
		@DosCall 44H
		ENDM

GENERIC_IOCTL_BLOCK	MACRO	DRIVE_NUM,FUNCTION,CATEGORY,PARM_BLK
		MOV	CH,08H
		MOV	CL,FUNCTION
		MOV	DX,OFFSET PARM_BLK - 1
		MOV	BX,DRIVE_NUM
		MOV	AL,0DH
		@DosCall 44H
		ENDM

IOCTL_GET_DRIVE_MAP	MACRO	LOGICAL_DRV
		MOV	BX,LOGICAL_DRV
		MOV	AL,0EH
		@DosCall 44H
		ENDM

IOCTL_SET_DRIVE_MAP	MACRO	LOGICAL_DRV
		MOV	BX,LOGICAL_DRV
		MOV	AL,0FH
		@DosCall 44H
		ENDM

XDUP		MACRO	HANDLE
		MOV	BX,HANDLE
		@DosCall 45H
		ENDM

XDUP2		MACRO	HANDLE1,HANDLE2
		MOV	BX,HANDLE1
		MOV	CX,HANDLE2
		@DosCall 46H
		ENDM

GET_DIR		MACRO	DRIVE,BUFFER
		MOV	DL,DRIVE
		MOV	SI,BUFFER
		@DosCall 47H
		ENDM

@GetDir		MACRO	BUFFER, DRIVE, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF

		IFNB <DRIVE>
			MOV	DL,DRIVE
		ENDIF

		IFNB <BUFFER>
			MOV	SI,BUFFER
		ENDIF

		@DosCall 47H
		ENDM

ALLOCATE_MEMORY	MACRO	BYTES
		MOV	BX,BYTES
		MOV	CL,4
		SHR	BX,CL
		INC	BX
		@DosCall 48H
		ENDM

;-----------------------------------------------------------------------------
;
;    AH = 48h    Allocate memory block
;
;    Documentation: http://osfree.org/doku/en:docs:macrolib:getblok
;

@GetBlok	MACRO	PARAGRAPHS
		IFNB	<PARAGRAPHS>
			MOV	BX, PARAGRAPHS
		ENDIF
		@DosCall 48H
		ENDM

FREE_MEMORY	MACRO	SEG_ADDR
		MOV	ES,SEG_ADDR
;		MOV	ES,AX
		@DosCall 49H
		ENDM

@FreeBlok	MACRO	SEGMNT
		MOV	ES,SEGMNT
;		MOV	ES,AX
		@DosCall 49H
		ENDM

SET_BLOCK	MACRO	LAST_BYTE
		MOV	BX,OFFSET LAST_BYTE
		MOV	CL,4
		SHR	BX,CL
		ADD	BX,17
		MOV	AH,4AH
		INT	21H
		MOV	AX,BX
		SHL	AX,CL
		DEC	AX
		MOV	SP,AX
		MOV	BP,SP
		ENDM

;-----------------------------------------------------------------------------
;
;    AH = 4Ah    Modify memory block
;
;    Documentation: http://osfree.org/doku/en:docs:macrolib:modblok
;

@ModBlok	MACRO	PARAGRAPHS, SEGMNT
		IFNB	<PARAGRAPHS>
			MOV	BX, PARAGRAPHS
		ENDIF
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	ES, AX
		ENDIF
		@DosCall 4AH
		ENDM

EXEC		MACRO	PATH, COMMAND, PARMS
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS
		MOV	WORD PTR PARMS[02H],OFFSET COMMAND
		MOV	WORD PTR PARMS[04H],CS
		MOV	WORD PTR PARMS[06H],5CH
		MOV	WORD PTR PARMS[08H],ES
		MOV	WORD PTR PARMS[0AH],6CH
		MOV	WORD PTR PARMS[0CH],ES
		MOV	AL,0
		@DosCall 4BH
		ENDM

EXEC_OVL	MACRO	PATH,PARMS,SEG_ADDR
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS
		MOV	PARMS,SEG_ADDR
		MOV	PARMS[02H],SEG_ADDR
		MOV	AL,3
		@DosCall 4BH
		ENDM

@Exec		MACRO	PATH, PARMS, SEGPATH, SEGPARAMS, OVERLAY
		IFNB <PATH>
		MOV	DX,OFFSET PATH
		ENDIF

		IFNB <PARMS>
		MOV	BX,OFFSET PARMS
		ENDIF

		IFNB <SEGPATH>
		MOV	AX, SEGPATH
		MOV	DS, AX
		ENDIF

		IFNB <SEGPARAMS>
		MOV	AX, SEGPARAMS
		MOV	ES, AX
		ENDIF

		IFB	<OVERLAY>
		XOR	AX,AX
		ELSE
		MOV	AL,3
		ENDIF
		@DosCall 4BH
		ENDM

;-----------------------------------------------------------------------------
;
;    AH = 4Ch    Terminate program
;
;    Documentation: http://osfree.org/doku/en:docs:macrolib:exit
;

@Exit		MACRO	RETURN
		IFNB <RETURN>
		IF (.TYPE (RETURN)) AND 00000100b ; Constant
			IFNB	<RETURN>
				MOV	AX,4C00H+RETURN
			ELSE
				MOV	AH,4CH
			ENDIF
		ELSE
			MOV	AH, 4CH
			IFDIFI	<RETURN>, <AL>
			MOV	AL, RETURN
			ENDIF
		ENDIF
		ELSE
			MOV	AH, 4CH
		ENDIF
		INT	21H
		ENDM

END_PROCESS	MACRO	RETURN
		@Exit	RETURN
		ENDM

RET_CODE	MACRO
		@DosCall 4DH
		ENDM

@GetRet		MACRO
		@DosCall 4DH
		ENDM

FIND_FIRST_FILE	MACRO	PATH,ATTRIB
		MOV	DX,OFFSET PATH
		MOV	CX,ATTRIB
		@DosCall 4EH
		ENDM

@GetFirst	MACRO	PATH, ATTRIB, SEGMNT
		IFNB <SEGMNT>
		MOV	AX, SEGMNT
		MOV	DS, AX
		ENDIF
		MOV	DX, OFFSET PATH
		IFNB	<ATTRIB>
			MOV	CX, ATTRIB
		ELSE
			XOR	CX, CX
		ENDIF
		@DosCall 4EH
		ENDM

FIND_NEXT_FILE	MACRO
		@DosCall 4FH
		ENDM

@GetNext	MACRO
		@DosCall 4FH
		ENDM

GET_VERIFY	MACRO
		@DosCall 54H
		ENDM

RENAME_FILE	MACRO	OLD_PATH,NEW_PATH
		LDS	DX, OLD_PATH
		LES	DI, NEW_PATH
		@DosCall 56H
		ENDM

@MoveFil	MACRO	OLD, NEW, SEGOLD, SEGNEW
		IFNB <SEGOLD>
		MOV	AX, SEGOLD
		MOV	DS, AX
		ENDIF
		MOV	DX, OLD
		IFNB <SEGNEW>
		MOV	AX, SEGNEW
		MOV	ES, AX
		ENDIF
		MOV	DI, NEW
		@DosCall 56H
		ENDM

LFN_RENAME_FILE	MACRO	OLD_PATH,NEW_PATH
		LDS	DX, OLD_PATH
		LES	DI, NEW_PATH
		@DosCall 7156H
		ENDM

GET_SET_DATE_TIME	MACRO	HANDLE,ACTION,TIME,DATE
		MOV	BX,HANDLE
		MOV	AL,ACTION
		MOV	CX,WORD PTR TIME
		MOV	DX,WORD PTR DATE
		@DosCall 57H
		ENDM

ALLOC_STRAT	MACRO	CODE,STRATEGY
		MOV	BX,STRATEGY
		MOV	AL,CODE
		@DosCall 58H
		ENDM

GET_ERROR	MACRO
		XOR	BX, BX
		@DosCall 59H
		ENDM

CREATE_TEMP	MACRO	PATHNAME,ATTRIB
		MOV	CX,ATTRIB
		MOV	DX,OFFSET PATHNAME
		@DosCall 5AH
		ENDM

CREATE_NEW	MACRO	PATHNAME,ATTRIB
		MOV	CX,ATTRIB
		MOV	DX,OFFSET PATHNAME
		@DosCall 5BH
		ENDM

LOCK_FILE	MACRO	HANDLE,START,BYTES
		MOV	BX,HANDLE
		MOV	CX,WORD PTR START
		MOV	DX,WORD PTR START+2
		MOV	SI,WORD PTR BYTES
		MOV	DI,WORD PTR BYTES+2
		MOV	AL,0
		@DosCall 5CH
		ENDM

UNLOCK		MACRO	HANDLE,START,BYTES
		MOV	BX,HANDLE
		MOV	CX,WORD PTR START
		MOV	DX,WORD PTR START+2
		MOV	SI,WORD PTR BYTES
		MOV	DI,WORD PTR BYTES+2
		MOV	AL,1
		@DosCall 5CH
		ENDM

GET_MACHINE_NAME	MACRO	BUFFER
		MOV	DX,OFFSET BUFFER
		MOV	AL,0
		@DosCall 5EH
		ENDM

PRINTER_SETUP	MACRO	INDEX,LGTH,STRING
		MOV	BX,INDEX
		MOV	CX,LGTH
		MOV	DX,OFFSET STRING
		MOV	AL,2
		@DosCall 5EH
		ENDM

GET_LIST	MACRO	INDEX,LOCAL,REMOTE
		MOV	BX,INDEX
		MOV	SI,OFFSET LOCAL
		MOV	DI,OFFSET REMOTE
		MOV	AL,2
		@DosCall 5FH
		ENDM

REDIR		MACRO	DEVICE,VALUE,SOURCE,DESTINATION
		MOV	BL,DEVICE
		MOV	CX,VALUE
		MOV	SI,OFFSET SOURCE
		MOV	ES,SEG DESTINATION
		MOV	DI,OFFSET DESTINATION
		MOV	AL,03H
		@DosCall 5FH
		ENDM

CANCEL_REDIR	MACRO	LOCAL
		MOV	SI,OFFSET LOCAL
		MOV	AL,4
		@DosCall 5FH
		ENDM

GET_PSP		MACRO
		@DosCall 62H
		ENDM


DISPLAY_ASCIZ	MACRO	ASCIZ_STRING
		LOCAL	SEARCH,FOUND_IT
		MOV	BX,OFFSET ASCIZ_STRING

		SEARCH:
		CMP	BYTE PTR [BX],0
		JE	FOUND_IT
		INC	BX
		JMP SHORT SEARCH

FOUND_IT:
		MOV	BYTE PTR [BX],"$"
		DISPLAY	ASCIZ_STRING
		MOV	BYTE PTR [BX],0
		DISPLAY_CHAR	0DH
		DISPLAY_CHAR	0AH
		ENDM

MOVE_STRING	MACRO	SOURCE,DESTINATION,COUNT
		PUSH	ES
		PUSH	DS
		POP	ES
		ASSUME	ES:CODE
		MOV	SI,OFFSET SOURCE
		MOV	DI,OFFSET DESTINATION
		MOV	CX,COUNT
	REP	MOVS	ES:DESTINATION,SOURCE
		ASSUME	ES:NOTHING
		POP	ES
		ENDM

CONVERT		MACRO	VALUE,BASE,DESTINATION
		LOCAL	TABLE,START
		JMP	START
TABLE		DB	"0123456789ABCDEF"

START:
		PUSH	AX
		PUSH	BX
		PUSH	DX
		MOV	AL,VALUE
		XOR	AH,AH
		XOR	BX,BX
		DIV	BASE
		MOV	BL,AL
		MOV	AL,CS:TABLE[BX]
		MOV	DESTINATION,AL
		MOV	BL,AH
		MOV	AL,CS:TABLE[BX]
		MOV	DESTINATION[1],AL
		POP	DX
		POP	BX
		POP	AX
		ENDM

CONVERT_TO_BINARY	MACRO  STRING,NUMBER,VALUE
		LOCAL	TEN,START,CALC,MULT,NO_MULT
		JMP	START
TEN		DB	10

START:
		MOV	VALUE,0
		XOR	CX,CX
		MOV	CL,NUMBER
		XOR	SI,SI

CALC:
		XOR	AX,AX
		MOV	AL,STRING[SI]
		SUB	AL,48
		CMP	CX,2
		JL	NO_MULT
		PUSH	CX
		DEC	CX

MULT:
		MUL	CS:TEN
		LOOP	MULT
		POP	CX

NO_MULT:
		ADD	VALUE,AX
		INC	SI
		LOOP	CALC
		ENDM

CONVERT_DATE	MACRO	DIR_ENTRY
		MOV	DX,WORD PTR DIR_ENTRY[24]
		MOV	CL,5
		SHR	DL,CL
		MOV	DH,DIR_ENTRY[24]
		AND	DH,1FH
		XOR	CX,CX
		MOV	CL,DIR_ENTRY[25]
		SHR	CL,1
		ADD	CX,1980
		ENDM

PACK_DATE	MACRO	DATE
		LOCAL	SET_BIT
;
; ON ENTRY: DH=DAY, DL=MONTH, CX=(YEAR-1980)
;
		SUB	CX,1980
		PUSH	CX
		MOV	DATE,DH
		MOV	CL,5
		SHL	DL,CL
		POP	CX
		JNC	SET_BIT
		OR	CL,80H

SET_BIT:
		OR	DATE,DL
		ROL	CL,1
		MOV	DATE[1],CL
		ENDM
;
@GetKey		MACRO	ECHO, CC, CLEAR
		IF	ECHO
			IF	CC
			MOV	AH, 01H
			ELSE
			MOV	AH, 07H
			ENDIF
		ELSE
			IF	CC
			MOV	AH, 08H
			ELSE
			MOV	AH, 07H
			ENDIF
		ENDIF
		IF	CLEAR
		MOV	AL, AH
		MOV	AH, 0CH
		ENDIF
		INT	21H
		IF	ECHO
			IF	NOT CC
			MOV	DL, AL
			@DosCall 02H
			ENDIF
		ENDIF
		ENDM

ENDIF
