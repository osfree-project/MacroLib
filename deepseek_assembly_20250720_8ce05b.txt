;/*!
;   @file
;
;   @brief DOS Macro Library
;
;   (c) osFree Project 2018-2022, <http://www.osFree.org>
;   for licence see licence.txt in root directory, or project website
;
;   @author Yuri Prokushev (yuri.prokushev@gmail.com)
;
;   This library based mostly on MASM 5.x and MASM 6.x documentation.
;
;   Documentation: http://osfree.org/doku/en:docs:macrolib
;
;*/
;
; Документация на русском языке:
; ==============================
; Библиотека макросов для работы с API DOS через прерывание INT 21h.
; Макросы предоставляют удобный интерфейс для вызова функций DOS,
; скрывая детали работы с регистрами и прерываниями.
; 
; Особенности:
; - Все макросы сохраняют состояние регистров, кроме явно указанных
; - Поддерживают как стандартные (8.3), так и LFN (длинные) имена файлов
; - Обеспечивают совместимость с различными версиями DOS
; - Позволяют работать в реальном и защищенном режимах
;
; Использование:
; 1. Включите этот файл в свой проект: INCLUDE dos.inc
; 2. Используйте макросы вместо прямого вызова прерываний
; 3. Для LFN-функций убедитесь, что ОС поддерживает длинные имена
;
; Примечания:
; - Параметры макросов аналогичны параметрам соответствующих функций DOS
; - Для работы с LFN используйте макросы с префиксом LFN_
; - Возвращаемые значения помещаются в регистр AX (или DX:AX для 32-битных)
; - В случае ошибки устанавливается флаг CF и код ошибки в AX
;
; Соглашения об именах:
; @-префикс - расширенные или вспомогательные версии макросов
; LFN_-префикс - работа с длинными именами файлов (Long File Name)
;-----------------------------------------------------------------------------

IFNDEF DOS_DEFINED

DOS_DEFINED EQU 1

.8086

		INCLUDE	sysmaca.inc

;-----------------------------------------------------------------------------
; @DosCall - Основной макрос для вызова функций DOS
; Вход: FUNC - номер функции (константа или регистр)
;-----------------------------------------------------------------------------
@DosCall	MACRO	FUNC
		IF (OPATTR (FUNC)) AND 00000100B ; Constant
			IF FUNC LT 100H	; BYTE
				MOV	AH,FUNC
			ELSE		; WORD
				MOV	AX,FUNC
			ENDIF
		ELSEIF (OPATTR (FUNC)) AND 00010000B ; Register
			IF TYPE (FUNC) EQ 1	; BYTES (1 BYTE)
			MOV	AH,FUNC
			ELSEIF TYPE (FUNC) EQ 2	; WORD (2 BYTE)
				IFDIFI	<FUNC>, <AX>
					MOV	AX,FUNC
				ENDIF
			ENDIF
		ELSE
			.ERR 1 Unsupported argument type
		ENDIF
		INT	21H
		ENDM

;-----------------------------------------------------------------------------
; TERMINATE - Завершение программы (INT 20h)
;-----------------------------------------------------------------------------
TERMINATE	MACRO
		INT	20H
		ENDM

;-----------------------------------------------------------------------------
; FLUSH - Сброс буферов файла на диск
; Вход: HANDLE - дескриптор файла
;-----------------------------------------------------------------------------
FLUSH		MACRO	HANDLE
		MOV	BX, HANDLE
		@DosCall 68H
		ENDM

;-----------------------------------------------------------------------------
; FILE_UNLOCK - Разблокировка области файла
; Вход: 
;   HANDLE - дескриптор файла
;   START  - смещение начала области
;   BYTES  - размер области
;-----------------------------------------------------------------------------
FILE_UNLOCK	MACRO	HANDLE,START,BYTES
		MOV	BX, HANDLE
		MOV	CX, WORD PTR START
		MOV	DX, WORD PTR START+2
		MOV	SI, WORD PTR BYTES
		MOV	DI, WORD PTR BYTES+2
		MOV	AL, 1
		@DosCall 5CH
		ENDM

;-----------------------------------------------------------------------------
; ABS_DISK_READ - Абсолютное чтение с диска (INT 25h)
; Вход:
;   DISK         - номер диска (0=A, 1=B, ...)
;   BUFFER       - буфер для данных
;   NUM_SECTORS  - количество секторов
;   FIRST_SECTOR - начальный сектор
;-----------------------------------------------------------------------------
ABS_DISK_READ	MACRO	DISK,BUFFER,NUM_SECTORS,FIRST_SECTOR
		MOV	AL,DISK
		MOV	BX,OFFSET BUFFER
		MOV	CX,NUM_SECTORS
		MOV	DX,FIRST_SECTOR
		INT	25H
		POPF
		ENDM

;-----------------------------------------------------------------------------
; ABS_DISK_WRITE - Абсолютная запись на диск (INT 26h)
; Вход: аналогично ABS_DISK_READ
;-----------------------------------------------------------------------------
ABS_DISK_WRITE	MACRO	DISK,BUFFER,NUM_SECTORS,FIRST_SECTOR
		MOV	AL,DISK
		MOV	BX,OFFSET BUFFER
		MOV	CX,NUM_SECTORS
		MOV	DX,FIRST_SECTOR
		INT	26H
		POPF
		ENDM

;-----------------------------------------------------------------------------
; STAY_RESIDENT - Оставить программу резидентной в памяти (INT 27h)
; Вход: LAST_INSTRUC - метка последней инструкции резидентной части
;-----------------------------------------------------------------------------
STAY_RESIDENT	MACRO	LAST_INSTRUC
		MOV	DX,OFFSET LAST_INSTRUC
		INC	DX
		INT	27H
		ENDM

;-----------------------------------------------------------------------------
; TERMINATE_PROGRAM - Завершение программы (функция 00h)
;-----------------------------------------------------------------------------
TERMINATE_PROGRAM	MACRO
		@DosCall 00H
		ENDM

;-----------------------------------------------------------------------------
; READ_KBD_AND_ECHO - Чтение символа с клавиатуры с эхом (функция 01h)
; Выход: AL - введенный символ
;-----------------------------------------------------------------------------
READ_KBD_AND_ECHO	MACRO
		@DosCall 01H
		ENDM

;-----------------------------------------------------------------------------
; DISPLAY_CHAR - Вывод символа на экран (функция 02h)
; Вход: CHARACTER - выводимый символ
;-----------------------------------------------------------------------------
DISPLAY_CHAR	MACRO	CHARACTER
		MOV	DL,CHARACTER
		@DosCall 02H
		ENDM

;-----------------------------------------------------------------------------
; @DispCh - Вывод одного или нескольких символов
; Вход: CHARACTER - символ(ы) для вывода
;-----------------------------------------------------------------------------
@DispCh		MACRO	CHARACTER: VARARG
		MOV	AH, 02H
		IFNB <CHARACTER>
			FOR	ARG, <CHARACTER>
			MOV	DL, ARG
			INT	21H
			ENDM
		ELSE
			@DosCall 02h
		ENDIF
		ENDM

;-----------------------------------------------------------------------------
; AUX_INPUT - Ввод символа с AUX-порта (функция 03h)
; Выход: AL - введенный символ
;-----------------------------------------------------------------------------
AUX_INPUT	MACRO
		@DosCall 03H
		ENDM

;-----------------------------------------------------------------------------
; AUX_OUTPUT - Вывод символа на AUX-порт (функция 04h)
; Вход: CHARACTER - выводимый символ
;-----------------------------------------------------------------------------
AUX_OUTPUT	MACRO
		@DosCall 04H
		ENDM

;-----------------------------------------------------------------------------
; PRINT_CHAR - Вывод символа на принтер (функция 05h)
; Вход: CHARACTER - выводимый символ
;-----------------------------------------------------------------------------
PRINT_CHAR	MACRO	CHARACTER
		MOV	DL,CHARACTER
		@DosCall 05H
		ENDM

;-----------------------------------------------------------------------------
; @PrtCh - Вывод символа(ов) на принтер
; Вход: CHARACTER - символ(ы) для печати
;-----------------------------------------------------------------------------
@PrtCh	MACRO	CHARACTER: VARARG
		MOV	AH, 05H
		FOR	ARG, <CHARACTER>
		MOV	DL, ARG
		INT	21H
		ENDM
		ENDM

;-----------------------------------------------------------------------------
; DIR_CONSOLE_IO - Прямой ввод/вывод в консоль (функция 06h)
; Вход: SWITCH - 0FFh для ввода, иначе символ для вывода
; Выход: При вводе: ZF=1 если нет символа, AL=символ если ZF=0
;-----------------------------------------------------------------------------
DIR_CONSOLE_IO	MACRO	SWITCH
		MOV	DL,SWITCH
		@DosCall 06H
		ENDM

;-----------------------------------------------------------------------------
; DIR_CONSOLE_INPUT - Прямой ввод с консоли без эха (функция 07h)
; Выход: AL - введенный символ
;-----------------------------------------------------------------------------
DIR_CONSOLE_INPUT	MACRO
		@DosCall 07H
		ENDM

;-----------------------------------------------------------------------------
; READ_KBD - Чтение клавиатуры без эха (функция 08h)
; Выход: AL - введенный символ
;-----------------------------------------------------------------------------
READ_KBD	MACRO
		@DosCall 08H
		ENDM

;-----------------------------------------------------------------------------
; DISPLAY - Вывод строки на экран (функция 09h)
; Вход: 
;   STRING - строка, оканчивающаяся '$'
;   SEGMNT - необязательный сегмент строки
;-----------------------------------------------------------------------------
DISPLAY		MACRO	STRING, SEGMNT
		IFDIFI	<STRING>, <DX>
			@LOADARG	DX, STRING
		ENDIF
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		@DosCall 09H
		ENDM

;-----------------------------------------------------------------------------
; @DispStr - Альтернативное имя для DISPLAY
;-----------------------------------------------------------------------------
@DispStr	MACRO STRING, SEGMNT
		IFDIFI	<STRING>, <DX>
			@LOADARG	DX, STRING
		ENDIF
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		@DosCall 09H
		ENDM

;-----------------------------------------------------------------------------
; GET_STRING - Ввод строки с клавиатуры (функция 0Ah)
; Вход:
;   LIMIT  - максимальная длина
;   STRING - буфер для ввода (формат: [0]=max_len, [1]=actual_len, [2...]=chars)
;-----------------------------------------------------------------------------
GET_STRING	MACRO	LIMIT,STRING
		MOV	DX,OFFSET STRING
		MOV	STRING,LIMIT
		@DosCall 0AH
		ENDM

;-----------------------------------------------------------------------------
; @GetStr - Расширенный ввод строки
; Вход:
;   OFSET      - смещение буфера
;   TERMINATOR - символ окончания строки
;   LIMIT      - максимальная длина
;   SEGMNT     - сегмент буфера
;-----------------------------------------------------------------------------
@GetStr		MACRO	OFSET, TERMINATOR, LIMIT, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		MOV	DX,OFFSET <OFSET>
		MOV	SI, DX
		IFNB	<LIMIT>
			MOV	STRING,LIMIT
		ENDIF
		@DosCall 0AH
		INC	SI
		MOV	BL, [SI]
		SUB	BH, BH
		INC	SI
		IFNB	TERMINATOR
			MOV	[BX+SI], TERMINATOR
		ENDIF
		ENDM

;-----------------------------------------------------------------------------
; CHECK_KBD_STATUS - Проверка состояния клавиатуры (функция 0Bh)
; Выход: AL = 0FFh - символ доступен, 00h - нет символа
;-----------------------------------------------------------------------------
CHECK_KBD_STATUS	MACRO
		@DosCall 0BH
		ENDM

;-----------------------------------------------------------------------------
; FLUSH_AND_READ_KBD - Сброс буфера и ввод клавиатуры (функция 0Ch)
; Вход: SWITCH - режим ввода (аналогично DIR_CONSOLE_IO)
;-----------------------------------------------------------------------------
FLUSH_AND_READ_KBD	MACRO	SWITCH
		MOV	AL,SWITCH
		@DosCall 0CH
		ENDM

;-----------------------------------------------------------------------------
; RESET_DISK - Сброс дисковых буферов (функция 0Dh)
;-----------------------------------------------------------------------------
RESET_DISK	MACRO
		@DosCall 0DH
		ENDM

;-----------------------------------------------------------------------------
; LFN_RESET_DISK - Сброс буферов для LFN (длинных имен) (функция 710Dh)
; Вход: DISK - номер диска
;-----------------------------------------------------------------------------
LFN_RESET_DISK	MACRO	DISK
		MOV	AX, 710DH
		MOV	CX, 2
		MOV	DX, DISK
		INT	21H
		ENDM

;-----------------------------------------------------------------------------
; SELECT_DISK - Выбор текущего диска (функция 0Eh)
; Вход: DISK - буква диска (например 'C')
; Выход: AL - количество логических дисков
;-----------------------------------------------------------------------------
SELECT_DISK	MACRO	DISK
		MOV	DL,DISK
		SUB	DL, 65		; 'A'
		@DosCall 0EH
		INT	21H
		ENDM

;-----------------------------------------------------------------------------
; @SetDrv - Установка текущего диска (функция 0Eh)
; Вход: DRIVE - номер диска (0=A, 1=B, ...)
; Выход: AL - количество логических дисков
;-----------------------------------------------------------------------------
@SetDrv		MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 0EH
		ENDM

;-----------------------------------------------------------------------------
; OPEN - Открытие файла через FCB (функция 0Fh)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
OPEN		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 0FH
		ENDM

;-----------------------------------------------------------------------------
; CLOSE - Закрытие файла через FCB (функция 10h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
CLOSE		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 10H
		ENDM

;-----------------------------------------------------------------------------
; SEARCH_FIRST - Поиск первого файла через FCB (функция 11h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
SEARCH_FIRST	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 11H
		ENDM

;-----------------------------------------------------------------------------
; SEARCH_NEXT - Поиск следующего файла через FCB (функция 12h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
SEARCH_NEXT	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 12H
		ENDM

;-----------------------------------------------------------------------------
; DELETE - Удаление файла через FCB (функция 13h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
DELETE		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 13H
		ENDM

;-----------------------------------------------------------------------------
; READ_SEQ - Последовательное чтение через FCB (функция 14h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, 1 при EOF, 3 при чтении части записи
;-----------------------------------------------------------------------------
READ_SEQ	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 14H
		ENDM

;-----------------------------------------------------------------------------
; WRITE_SEQ - Последовательная запись через FCB (функция 15h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, 1 при нехватке места, 2 при переполнении DTA
;-----------------------------------------------------------------------------
WRITE_SEQ	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 15H
		ENDM

;-----------------------------------------------------------------------------
; CREATE - Создание файла через FCB (функция 16h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
CREATE		MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 16H
		ENDM

;-----------------------------------------------------------------------------
; RENAME - Переименование файла через FCB (функция 17h)
; Вход: 
;   FCB     - блок управления файлом
;   NEWNAME - новое имя файла
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
RENAME		MACRO	FCB,NEWNAME
		MOV	DX,OFFSET FCB
		@DosCall 17H
		ENDM

;-----------------------------------------------------------------------------
; CURRENT_DISK - Получение текущего диска (функция 19h)
; Выход: AL - номер диска (0=A, 1=B, ...)
;-----------------------------------------------------------------------------
CURRENT_DISK	MACRO
		@DosCall 19H
		ENDM

;-----------------------------------------------------------------------------
; @GetDrv - Получение текущего диска (функция 19h)
; Выход: AL - номер текущего диска
;-----------------------------------------------------------------------------
@GetDrv		MACRO
		@DosCall 19H
		ENDM

;-----------------------------------------------------------------------------
; SET_DTA - Установка адреса DTA (Disk Transfer Area) (функция 1Ah)
; Вход: BUFFER - адрес буфера DTA
;-----------------------------------------------------------------------------
SET_DTA		MACRO	BUFFER
		MOV	DX,OFFSET BUFFER
		@DosCall 1AH
		ENDM

;-----------------------------------------------------------------------------
; @SetDTA - Установка DTA с возможностью указания сегмента
; Вход:
;   BUFFER - адрес буфера
;   SEGMNT - сегмент буфера (необязательно)
;-----------------------------------------------------------------------------
@SetDTA		MACRO BUFFER, SEGMNT
		IFNB <SEGMNT>
			MOV AX, SEGMNT
			MOV DS, AX
		ENDIF
		IFNB <BUFFER>
			MOV	DX,OFFSET BUFFER
		ENDIF
		@DosCall 1AH
		ENDM

;-----------------------------------------------------------------------------
; DEF_DRIVE_DATA - Получение информации о текущем диске (функция 1Bh)
; Выход: 
;   DS:BX - адрес таблицы параметров диска
;   DX    - количество кластеров
;   AL    - секторов на кластер
;   CX    - размер сектора в байтах
;-----------------------------------------------------------------------------
DEF_DRIVE_DATA	MACRO
		@DosCall 1BH
		ENDM

;-----------------------------------------------------------------------------
; DRIVE_DATA - Получение информации о диске (функция 1Ch)
; Вход: DRIVE - номер диска (0=текущий, 1=A, 2=B, ...)
; Выход: аналогично DEF_DRIVE_DATA
;-----------------------------------------------------------------------------
DRIVE_DATA	MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 1CH
		ENDM

;-----------------------------------------------------------------------------
; READ_RAN - Прямое чтение через FCB (функция 21h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, 1 при EOF, 3 при чтении части записи
;-----------------------------------------------------------------------------
READ_RAN	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 21H
		ENDM

;-----------------------------------------------------------------------------
; WRITE_RAN - Прямая запись через FCB (функция 22h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, 1 при нехватке места, 2 при переполнении DTA
;-----------------------------------------------------------------------------
WRITE_RAN	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 22H
		ENDM

;-----------------------------------------------------------------------------
; FILE_SIZE - Получение размера файла через FCB (функция 23h)
; Вход: FCB - блок управления файлом
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
FILE_SIZE	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 23H
		ENDM

;-----------------------------------------------------------------------------
; SET_RELATIVE_RECORD - Установка относительной записи для FCB (функция 24h)
; Вход: FCB - блок управления файлом
;-----------------------------------------------------------------------------
SET_RELATIVE_RECORD	MACRO	FCB
		MOV	DX,OFFSET FCB
		@DosCall 24H
		ENDM

;-----------------------------------------------------------------------------
; SET_VECTOR - Установка вектора прерывания (функция 25h)
; Вход:
;   INTERRUPT     - номер прерывания
;   HANDLER_START - адрес обработчика
;-----------------------------------------------------------------------------
SET_VECTOR	MACRO	INTERRUPT,HANDLER_START
		MOV	AL,INTERRUPT
		MOV	DX,OFFSET HANDLER_START
		@DosCall 25H
		ENDM

;-----------------------------------------------------------------------------
; @SetInt - Установка вектора прерывания с возможностью указания сегмента
; Вход:
;   INTERRUPT - номер прерывания
;   VECTOR    - адрес обработчика
;   SEGMNT    - сегмент обработчика (необязательно)
;-----------------------------------------------------------------------------
@SetInt		MACRO	INTERRUPT, VECTOR, SEGMNT
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		MOV	AL,INTERRUPT
		MOV	DX,OFFSET VECTOR
		@DosCall 25H
		ENDM

;-----------------------------------------------------------------------------
; CREATE_PSP - Создание PSP (Program Segment Prefix) (функция 26h)
; Вход: SEG_ADDR - сегментный адрес для нового PSP
;-----------------------------------------------------------------------------
CREATE_PSP	MACRO	SEG_ADDR
		MOV	DX,OFFSET SEG_ADDR
		@DosCall 26H
		ENDM

;-----------------------------------------------------------------------------
; RAN_BLOCK_READ - Чтение блока записей через FCB (функция 27h)
; Вход:
;   FCB      - блок управления файлом
;   COUNT    - количество записей для чтения
;   REC_SIZE - размер записи
; Выход: AL = код ошибки, CX = фактически прочитано записей
;-----------------------------------------------------------------------------
RAN_BLOCK_READ	MACRO	FCB,COUNT,REC_SIZE
		MOV	DX,OFFSET FCB
		MOV	CX,COUNT
		MOV	WORD PTR FCB[14],REC_SIZE
		@DosCall 27H
		ENDM

;-----------------------------------------------------------------------------
; RAN_BLOCK_WRITE - Запись блока записей через FCB (функция 28h)
; Вход: аналогично RAN_BLOCK_READ
; Выход: AL = код ошибки, CX = фактически записано записей
;-----------------------------------------------------------------------------
RAN_BLOCK_WRITE	MACRO	FCB,COUNT,REC_SIZE
		MOV	DX,OFFSET FCB
		MOV	CX,COUNT
		MOV	WORD PTR FCB[14],REC_SIZE
		@DosCall 28H
		ENDM

;-----------------------------------------------------------------------------
; PARSE - Разбор имени файла в FCB (функция 29h)
; Вход:
;   STRING - строка с именем файла
;   FCB    - блок управления файлом
;-----------------------------------------------------------------------------
PARSE		MACRO	STRING,FCB
		MOV	SI,OFFSET STRING
		MOV	DI,OFFSET FCB
		PUSH	ES
		PUSH	DS
		POP	ES
		MOV	AL,0FH
		@DosCall 29H
		POP	ES
		ENDM

;-----------------------------------------------------------------------------
; GET_DATE - Получение текущей даты (функция 2Ah)
; Выход: 
;   CX = год (1980-2099)
;   DH = месяц (1-12)
;   DL = день (1-31)
;   AL = день недели (0=воскресенье, 1=понедельник, ...)
;-----------------------------------------------------------------------------
GET_DATE	MACRO
		@DosCall 2AH
		ENDM

;-----------------------------------------------------------------------------
; @GetDate - Получение текущей даты (функция 2Ah)
; Выход: аналогично GET_DATE
;-----------------------------------------------------------------------------
@GetDate	MACRO
		@DosCall 2AH
		ENDM

;-----------------------------------------------------------------------------
; SET_DATE - Установка даты (функция 2Bh)
; Вход:
;   YEAR  - год (1980-2099)
;   MONTH - месяц (1-12)
;   DAY   - день (1-31)
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
SET_DATE	MACRO	YEAR,MONTH,DAY
		MOV	CX,YEAR
		MOV	DH,MONTH
		MOV	DL,DAY
		@DosCall 2BH
		ENDM

;-----------------------------------------------------------------------------
; @SetDate - Установка даты (функция 2Bh)
; Вход: аналогично SET_DATE
;-----------------------------------------------------------------------------
@SetDate	MACRO MONTH, DAY, YEAR
		MOV	CX,YEAR
		MOV	DH,MONTH
		MOV	DL,DAY
		@DosCall 2BH
		ENDM

;-----------------------------------------------------------------------------
; GET_TIME - Получение текущего времени (функция 2Ch)
; Выход:
;   CH = часы (0-23)
;   CL = минуты (0-59)
;   DH = секунды (0-59)
;   DL = сотые доли секунды (0-99)
;-----------------------------------------------------------------------------
GET_TIME	MACRO
		@DosCall 2CH
		ENDM

;-----------------------------------------------------------------------------
; @GetTime - Получение текущего времени (функция 2Ch)
; Выход: аналогично GET_TIME
;-----------------------------------------------------------------------------
@GetTime	MACRO
		@DosCall 2CH
		ENDM

;-----------------------------------------------------------------------------
; SET_TIME - Установка времени (функция 2Dh)
; Вход:
;   HOUR      - часы (0-23)
;   MINUTES   - минуты (0-59)
;   SECONDS   - секунды (0-59)
;   HUNDREDTHS - сотые доли секунды (0-99)
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
SET_TIME	MACRO	HOUR,MINUTES,SECONDS,HUNDREDTHS
		MOV	CH,HOUR
		MOV	CL,MINUTES
		MOV	DH,SECONDS
		MOV	DL,HUNDREDTHS
		@DosCall 2DH
		ENDM

;-----------------------------------------------------------------------------
; @SetTime - Установка времени (функция 2Dh)
; Вход: аналогично SET_TIME
;-----------------------------------------------------------------------------
@SetTime	MACRO	HOUR, MINUTES, SECONDS, HUNDREDTHS
		MOV	CH,HOUR
		MOV	CL,MINUTES
		MOV	DH,SECONDS
		MOV	DL,HUNDREDTHS
		@DosCall 2DH
		ENDM

;-----------------------------------------------------------------------------
; VERIFY - Установка флага верификации (функция 2Eh)
; Вход: SWITCH - 00h отключить, 01h включить
;-----------------------------------------------------------------------------
VERIFY		MACRO	SWITCH
		MOV	AL,SWITCH
		@DosCall 2EH
		ENDM

;-----------------------------------------------------------------------------
; GET_DTA - Получение адреса DTA (функция 2Fh)
; Выход: ES:BX - адрес текущего DTA
;-----------------------------------------------------------------------------
GET_DTA		MACRO
		@DosCall 2FH
		ENDM

;-----------------------------------------------------------------------------
; @GetDTA - Получение адреса DTA (функция 2Fh)
; Выход: ES:BX - адрес текущего DTA
;-----------------------------------------------------------------------------
@GetDTA		MACRO
		@DosCall 2FH
		ENDM

;-----------------------------------------------------------------------------
; GET_VERSION - Получение версии DOS (функция 3000h)
; Выход: 
;   AL = старшая версия
;   AH = младшая версия
;   BH = флаги OEM
;   BL:CX = 24-битный серийный номер
;-----------------------------------------------------------------------------
GET_VERSION	MACRO
		@DosCall 3000H			; AL=0 FOR DOS 5+ COMPATIBILITY
		ENDM

;-----------------------------------------------------------------------------
; @GetVer - Получение версии DOS (функция 3000h)
; Выход: аналогично GET_VERSION
;-----------------------------------------------------------------------------
@GetVer		MACRO
		@DosCall 3000H			; AL=0 FOR DOS 5+ COMPATIBILITY
		ENDM

;-----------------------------------------------------------------------------
; KEEP_PROCESS - Оставить программу резидентной (функция 31h)
; Вход:
;   RETURN_CODE - код возврата
;   LAST_BYTE   - последний байт резидентной части
;-----------------------------------------------------------------------------
KEEP_PROCESS	MACRO	RETURN_CODE,LAST_BYTE
		MOV	AL,RETURN_CODE
		MOV	DX,OFFSET LAST_BYTE
		MOV	CL,4
		SHR	DX,CL
		INC	DX
		@DosCall 31H
		ENDM

;-----------------------------------------------------------------------------
; @TSR - Оставить программу резидентной (функция 31h)
; Вход:
;   PARAGRAPHS - размер резидентной части в параграфах
;   RETURN     - код возврата
;-----------------------------------------------------------------------------
@TSR		MACRO	PARAGRAPHS, RETURN
		MOV	AL,RETURN
		MOV	DX,PARAGRAPHS
		@DosCall 31H
		ENDM

;-----------------------------------------------------------------------------
; CTRL_C_CK - Управление обработкой Ctrl-C (функция 33h)
; Вход:
;   ACTION - 00h получить состояние, 01h установить состояние
;   STATE  - новое состояние (для установки)
; Выход: При запросе: DL = текущее состояние
;-----------------------------------------------------------------------------
CTRL_C_CK	MACRO	ACTION,STATE
		IFNB <ACTION>
			MOV	AL,ACTION
		ENDIF
		IFNB <STATE>
			MOV	DL,STATE
		ENDIF
		@DosCall 33H
		ENDM

;-----------------------------------------------------------------------------
; GET_VECTOR - Получение вектора прерывания (функция 35h)
; Вход: INTERRUPT - номер прерывания
; Выход: ES:BX - адрес обработчика
;-----------------------------------------------------------------------------
GET_VECTOR	MACRO	INTERRUPT
		MOV	AL,INTERRUPT
		@DosCall 35H
		ENDM

;-----------------------------------------------------------------------------
; @GetInt - Получение вектора прерывания (функция 35h)
; Вход: INTERRUPT - номер прерывания
; Выход: ES:BX - адрес обработчика
;-----------------------------------------------------------------------------
@GetInt		MACRO	INTERRUPT
		MOV	AL,INTERRUPT
		@DosCall 35H
		ENDM

;-----------------------------------------------------------------------------
; GET_DISK_SPACE - Получение информации о свободном месте на диске (функция 36h)
; Вход: DRIVE - номер диска (0=текущий, 1=A, 2=B, ...)
; Выход:
;   AX = секторов на кластер
;   BX = свободных кластеров
;   CX = байт на сектор
;   DX = кластеров на диске
;-----------------------------------------------------------------------------
GET_DISK_SPACE	MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 36H
		ENDM

;-----------------------------------------------------------------------------
; @ChkDrv - Проверка диска (функция 36h)
; Вход: DRIVE - номер диска
; Выход: аналогично GET_DISK_SPACE
;-----------------------------------------------------------------------------
@ChkDrv		MACRO	DRIVE
		MOV	DL,DRIVE
		@DosCall 36H
		ENDM

;-----------------------------------------------------------------------------
; GET_COUNTRY - Получение информации о стране (функция 38h)
; Вход:
;   COUNTRY - код страны (0FFh для текущей)
;   BUFFER  - буфер для данных
; Выход: BX = код страны
;-----------------------------------------------------------------------------
GET_COUNTRY	MACRO	COUNTRY,BUFFER
		LOCAL	GC_01
		MOV	DX,OFFSET BUFFER
		MOV	AX,COUNTRY
		CMP	AX,0FFH
		JL	GC_01
		MOV	AL,0FFH
		MOV	BX,COUNTRY
GC_01:		@DosCall 38H
		ENDM

;-----------------------------------------------------------------------------
; GET_UPPERCASE_TABLE - Получение таблицы преобразования в верхний регистр (функция 6602h)
; Вход:
;   COUNTRY - код страны
;   CODEPAGE - кодовая страница
;   BUFFER  - буфер для таблицы
;   BUFLEN  - размер буфера
;-----------------------------------------------------------------------------
GET_UPPERCASE_TABLE	MACRO COUNTRY, CODEPAGE, BUFFER, BUFLEN
		MOV	BX, CODEPAGE
		MOV	DX, COUNTRY
		MOV	CX, BUFLEN
		LES	DI, BUFFER
		@DosCall 6602H
		ENDM

;-----------------------------------------------------------------------------
; SET_COUNTRY - Установка информации о стране (функция 38h)
; Вход: COUNTRY - код страны
;-----------------------------------------------------------------------------
SET_COUNTRY	MACRO	COUNTRY
		LOCAL	SC_01
		MOV	DX,0FFFFH
		MOV	AX,COUNTRY
		CMP	AX,0FFH
		JL	SC_01
		MOV	AL,0FFH
		MOV	BX,COUNTRY
SC_01:		@DosCall 38H
		ENDM

;-----------------------------------------------------------------------------
; MAKE_DIR - Создание каталога (функция 39h)
; Вход: PATH - путь к создаваемому каталогу
;-----------------------------------------------------------------------------
MAKE_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 39H
		ENDM

;-----------------------------------------------------------------------------
; @MkDir - Создание каталога с возможностью указания сегмента
; Вход:
;   PATH   - путь к каталогу
;   SEGMNT - сегмент пути (необязательно)
;-----------------------------------------------------------------------------
@MkDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		@DosCall 39H
		ENDM

;-----------------------------------------------------------------------------
; LFN_MAKE_DIR - Создание каталога с длинным именем (функция 7139h)
; Вход: PATH - путь к создаваемому каталогу
;-----------------------------------------------------------------------------
LFN_MAKE_DIR	MACRO	PATH
		LDS	DX, PATH
		STC
		@DosCall 7139H
		ENDM

;-----------------------------------------------------------------------------
; REM_DIR - Удаление каталога (функция 3Ah)
; Вход: PATH - путь к удаляемому каталогу
;-----------------------------------------------------------------------------
REM_DIR		MACRO	PATH
		LDS	DX, PATH
		@DosCall 3AH
		ENDM

;-----------------------------------------------------------------------------
; @RmDir - Удаление каталога с возможностью указания сегмента
; Вход:
;   PATH   - путь к каталогу
;   SEGMNT - сегмент пути (необязательно)
;-----------------------------------------------------------------------------
@RmDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		@DosCall 3AH
		ENDM

;-----------------------------------------------------------------------------
; LFN_REM_DIR - Удаление каталога с длинным именем (функция 713Ah)
; Вход: PATH - путь к удаляемому каталогу
;-----------------------------------------------------------------------------
LFN_REM_DIR	MACRO	PATH
		LDS	DX, PATH
		STC
		@DosCall 713AH
		ENDM

;-----------------------------------------------------------------------------
; CHANGE_DIR - Смена текущего каталога (функция 3Bh)
; Вход: PATH - новый текущий путь
; Выход: AL = 0 при успехе, FFh при ошибке
;-----------------------------------------------------------------------------
CHANGE_DIR	MACRO	PATH
		LDS	DX, PATH
		@DosCall 3BH
		ENDM

;-----------------------------------------------------------------------------
; @ChDir - Смена каталога с возможностью указания сегмента
; Вход:
;   PATH   - путь к каталогу
;   SEGMNT - сегмент пути (необязательно)
;-----------------------------------------------------------------------------
@ChDir		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
		MOV	AX, <SEGMNT>
		MOV	DS, AX
		ENDIF
		@DosCall 3BH
		ENDM

;-----------------------------------------------------------------------------
; LFN_CHANGE_DIR - Смена каталога с длинным именем (функция 713Bh)
; Вход: PATH - новый текущий путь
;-----------------------------------------------------------------------------
LFN_CHANGE_DIR	MACRO	PATH
		LDS	DX, PATH
		STC
		@DosCall 713BH
		ENDM

;-----------------------------------------------------------------------------
; @VdmChDir - Универсальная смена каталога (VDM - Virtual DOS Machine)
; Определяет поддержку LFN и использует соответствующую функцию
; Вход: PATH - путь к каталогу
;-----------------------------------------------------------------------------
@VdmChDir	MACRO	PATH
		LOCAL	EXIT
		CMP	LFNAPI, 0FFFFH
		JZ	@F
		CHANGE_DIR [DS:BP].ARGS.DIRNAME
		JMP	EXIT
@@:
		LFN_CHANGE_DIR [DS:BP].ARGS.DIRNAME
EXIT:
		ENDM

;-----------------------------------------------------------------------------
; CREATE_HANDLE - Создание файла через handle (функция 3Ch)
; Вход:
;   PATH    - путь к файлу
;   ATTRIB  - атрибуты файла
; Выход: AX = handle файла
;-----------------------------------------------------------------------------
CREATE_HANDLE	MACRO	PATH,ATTRIB
		LDS	DX,PATH
		MOV	CX,ATTRIB
		@DosCall 3CH
		ENDM

;-----------------------------------------------------------------------------
; @MakFil - Создание файла с дополнительными опциями
; Вход:
;   PATH    - путь к файлу
;   ATTRIB  - атрибуты файла
;   SEGMNT  - сегмент пути
;   KIND    - тип создания (не используется)
;-----------------------------------------------------------------------------
@MakFil		MACRO	PATH, ATTRIB, SEGMNT, KIND
		IFNB	<SEGMNT>
			MOV	AX, SEGMNT
			MOV	DS, AX
		ENDIF
		IFNB	<PATH>
			MOV	DX,PATH
		ENDIF
		IFNB	<ATTRIB>
			MOV	CX,ATTRIB
		ENDIF
		@DosCall 3CH
		ENDM

;-----------------------------------------------------------------------------
; OPEN_HANDLE - Открытие файла через handle (функция 3Dh)
; Вход:
;   PATH   - путь к файлу
;   ACCESS - режим доступа
; Выход: AX = handle файла
;-----------------------------------------------------------------------------
OPEN_HANDLE	MACRO	PATH,ACCESS
		LDS	DX,PATH
		MOV	AL,ACCESS
		@DosCall 3DH
		ENDM

;-----------------------------------------------------------------------------
; @OpenFil - Открытие файла с дополнительными опциями
; Вход:
;   PATH   - путь к файлу
;   ACCESS - режим доступа
;   SEGMNT - сегмент пути
;-----------------------------------------------------------------------------
@OpenFil	MACRO	PATH, ACCESS, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, SEGMNT
			MOV	DS, AX
		ENDIF
		IFNB	<PATH>
			MOV	DX,PATH
		ENDIF
		IFNB	<ACCESS>
			MOV	AL,ACCESS
		ENDIF
		@DosCall 3DH
		ENDM

;-----------------------------------------------------------------------------
; CLOSE_HANDLE - Закрытие файла через handle (функция 3Eh)
; Вход: HANDLE - дескриптор файла
;-----------------------------------------------------------------------------
CLOSE_HANDLE	MACRO	HANDLE
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF
		@DosCall 3EH
		ENDM

;-----------------------------------------------------------------------------
; @ClosFil - Закрытие файла (функция 3Eh)
; Вход: HANDLE - дескриптор файла
;-----------------------------------------------------------------------------
@ClosFil	MACRO	HANDLE
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF
		@DosCall 3EH
		ENDM

;-----------------------------------------------------------------------------
; READ_HANDLE - Чтение из файла (функция 3Fh)
; Вход:
;   HANDLE - дескриптор файла
;   BUFFER - буфер для данных
;   BYTES  - количество байт для чтения
; Выход: AX = фактически прочитано байт
;-----------------------------------------------------------------------------
READ_HANDLE	MACRO	HANDLE,BUFFER,BYTES
		MOV	BX,HANDLE
		MOV	DX,OFFSET BUFFER
		MOV	CX,BYTES
		@DosCall 3FH
		ENDM

;-----------------------------------------------------------------------------
; @Read - Расширенное чтение из файла
; Вход:
;   OFSET   - смещение буфера
;   BYTES   - количество байт для чтения
;   HANDLE  - дескриптор файла
;   SEGMNT  - сегмент буфера (необязательно)
; Выход: AX = фактически прочитано байт
;-----------------------------------------------------------------------------
@Read		MACRO	OFSET, BYTES, HANDLE, SEGMNT
		IFNB	<SEGMNT>
			PUSH	AX
			MOV	AX, SEGMNT
			MOV	DS, AX
			POP		AX
		ENDIF

		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF

		IFNB	<OFSET>
			MOV	DX,OFFSET OFSET
		ENDIF

		IFNB	<BYTES>
			MOV	CX,BYTES
		ENDIF
		@DosCall 3FH
		ENDM

;-----------------------------------------------------------------------------
; WRITE_HANDLE - Запись в файл (функция 40h)
; Вход:
;   HANDLE - дескриптор файла
;   BUFFER - буфер с данными
;   BYTES  - количество байт для записи
; Выход: AX = фактически записано байт
;-----------------------------------------------------------------------------
WRITE_HANDLE	MACRO	HANDLE,BUFFER,BYTES
		MOV	BX,HANDLE
		LDS	DX,BUFFER
		MOV	CX,BYTES
		@DosCall 40H
		ENDM

;-----------------------------------------------------------------------------
; @Write - Расширенная запись в файл
; Вход:
;   OFSET   - смещение буфера
;   BYTES   - количество байт для записи
;   HANDLE  - дескриптор файла
;   SEGMNT  - сегмент буфера (необязательно)
; Выход: AX = фактически записано байт
;-----------------------------------------------------------------------------
@Write		MACRO	OFSET, BYTES, HANDLE, SEGMNT
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF

		IFNB	<OFSET>
			LDS	DX,OFSET
		ENDIF

		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF

		IFNB	<BYTES>
			MOV	CX,BYTES
		ENDIF

		@DosCall 40H
		ENDM

;-----------------------------------------------------------------------------
; DELETE_ENTRY - Удаление файла (функция 41h)
; Вход: PATH - путь к файлу
;-----------------------------------------------------------------------------
DELETE_ENTRY	MACRO	PATH
		LDS	DX, PATH
		@DosCall 41H
		ENDM

;-----------------------------------------------------------------------------
; @DelFil - Удаление файла с возможностью указания сегмента
; Вход:
;   PATH   - путь к файлу
;   SEGMNT - сегмент пути (необязательно)
;-----------------------------------------------------------------------------
@DelFil		MACRO	PATH, SEGMNT
		LDS	DX, PATH
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF
		@DosCall 41H
		ENDM

;-----------------------------------------------------------------------------
; LFN_DELETE_ENTRY - Удаление файла с длинным именем (функция 7141h)
; Вход: PATH - путь к файлу
;-----------------------------------------------------------------------------
LFN_DELETE_ENTRY	MACRO	PATH
		LDS	DX, PATH
		@DosCall 7141H
		ENDM

;-----------------------------------------------------------------------------
; MOVE_PTR - Перемещение указателя в файле (функция 42h)
; Вход:
;   HANDLE - дескриптор файла
;   HIGH   - старшее слово смещения
;   LOW    - младшее слово смещения
;   METHOD - метод перемещения:
;             0 - от начала файла
;             1 - от текущей позиции
;             2 - от конца файла
; Выход: DX:AX = новая позиция указателя
;-----------------------------------------------------------------------------
MOVE_PTR	MACRO	HANDLE,HIGH,LOW,METHOD
		MOV	BX,HANDLE
		MOV	CX,HIGH
		MOV	DX,LOW
		MOV	AL,METHOD
		@DosCall 42H
		ENDM

;-----------------------------------------------------------------------------
; @MovePtr - Универсальное перемещение указателя в файле
; Вход: аналогично MOVE_PTR
;-----------------------------------------------------------------------------
@MovePtr	MACRO	HANDLE,HIGH,LOW,METHOD
		IFNB	<HANDLE>
			MOV	BX,HANDLE
		ENDIF
		IFNB	<HIGH>
			MOV	CX,HIGH
		ENDIF
		IFNB	<LOW>
			MOV	DX,LOW
		ENDIF
		IFNB	<METHOD>
			MOV	AL,METHOD
		ENDIF
		@DosCall 42H
		ENDM

;-----------------------------------------------------------------------------
; @MovePtrAbs - Перемещение указателя от начала файла
; Вход:
;   HANDLE   - дескриптор файла
;   DISTANCE - абсолютное смещение
;-----------------------------------------------------------------------------
@MovePtrAbs	MACRO	HANDLE, DISTANCE
		MOV	BX,HANDLE
		MOV	CX,WORD PTR DISTANCE+2
		MOV	DX,WORD PTR DISTANCE
		@DosCall 4200H
		ENDM

;-----------------------------------------------------------------------------
; @MovePtrRel - Перемещение указателя относительно текущей позиции
; Вход:
;   HANDLE   - дескриптор файла
;   DISTANCE - относительное смещение
;-----------------------------------------------------------------------------
@MovePtrRel	MACRO	HANDLE, DISTANCE
		MOV	BX,HANDLE
		MOV	CX,WORD PTR DISTANCE+2
		MOV	DX,WORD PTR DISTANCE
		@DosCall 4201H
		ENDM

;-----------------------------------------------------------------------------
; @GetFilSz - Получение размера файла
; Вход: HANDLE - дескриптор файла
; Выход: DX:AX - размер файла
;-----------------------------------------------------------------------------
@GetFilSz	MACRO	HANDLE
		MOV	BX, HANDLE
		SUB	CX, CX
		MOV	DX, CX
		@DosCall 4201H
		PUSH	AX
		PUSH	DX
		MOV	DX, CX
		@DosCall 4202H
		POP	CX
		MOV	BX, DX
		POP	DX
		PUSH	AX
		PUSH	BX
		MOV	BX, HANDLE
		@DosCall 4200H
		POP	DX
		POP	AX
		ENDM

;-----------------------------------------------------------------------------
; CHANGE_MODE - Изменение атрибутов файла (функция 43h)
; Вход:
;   PATH    - путь к файлу
;   ACTION  - действие:
;             0 - получить атрибуты
;             1 - установить атрибуты
;   ATTRIB  - новые атрибуты (для установки)
; Выход: При получении: CX = атрибуты файла
;-----------------------------------------------------------------------------
CHANGE_MODE	MACRO	PATH,ACTION,ATTRIB
		LDS	DX,PATH
		MOV	AL,ACTION
		MOV	CX,ATTRIB
		@DosCall 43H
		ENDM

;-----------------------------------------------------------------------------
; LFN_CHANGE_MODE - Изменение атрибутов файла с длинным именем (функция 7143h)
; Вход: аналогично CHANGE_MODE
;-----------------------------------------------------------------------------
LFN_CHANGE_MODE	MACRO	PATH,ACTION,ATTRIB
		LDS	DX,PATH
		MOV	BL,ACTION
		MOV	CX,ATTRIB
		@DosCall 7143H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_DATA - Ввод/вывод данных устройства (функция 44h)
; Вход:
;   CODE    - код функции
;   HANDLE  - дескриптор устройства
;-----------------------------------------------------------------------------
IOCTL_DATA	MACRO	CODE,HANDLE
		MOV	BX,HANDLE
		MOV	AL,CODE
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_CHAR - Ввод/вывод управляющих символов (функция 44h)
; Вход:
;   CODE    - код функции
;   HANDLE  - дескриптор устройства
;   BUFFER  - буфер данных
;-----------------------------------------------------------------------------
IOCTL_CHAR	MACRO	CODE,HANDLE,BUFFER
		MOV	BX,HANDLE
		MOV	DX,OFFSET BUFFER
		MOV	AL,CODE
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_STATUS - Получение статуса устройства (функция 44h)
; Вход:
;   CODE    - код функции
;   DRIVE   - номер диска
;   BUFFER  - буфер для статуса
;-----------------------------------------------------------------------------
IOCTL_STATUS	MACRO	CODE,DRIVE,BUFFER
		MOV	BL,DRIVE
		MOV	DX,OFFSET BUFFER
		MOV	AL,CODE
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_CHANGE - Смена диска (функция 44h, подфункция 08h)
; Вход: DRIVE - номер диска
;-----------------------------------------------------------------------------
IOCTL_CHANGE	MACRO	DRIVE
		MOV	BL,DRIVE
		MOV	AL,08H
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_RBLOCK - Проверка блочного устройства (функция 44h, подфункция 09h)
; Вход: DRIVE - номер диска
;-----------------------------------------------------------------------------
IOCTL_RBLOCK	MACRO	DRIVE
		MOV	BL,DRIVE
		MOV	AL,09H
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_RHANDLE - Проверка устройства (функция 44h, подфункция 0Ah)
; Вход: HANDLE - дескриптор устройства
;-----------------------------------------------------------------------------
IOCTL_RHANDLE	MACRO	HANDLE
		MOV	BX,HANDLE
		MOV	AL,0AH
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_RETRY - Установка параметров повтора (функция 44h, подфункция 0Bh)
; Вход:
;   RETRIES - количество повторов
;   WAIT    - время ожидания
;-----------------------------------------------------------------------------
IOCTL_RETRY	MACRO	RETRIES,WAIT
		MOV	DX,RETRIES
		MOV	CX,WAIT
		MOV	AL,0BH
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; GENERIC_IOCTL_HANDLES - Обобщенный IOCTL для устройств (функция 44h, подфункция 0Ch)
; Вход:
;   HANDLE   - дескриптор устройства
;   FUNCTION - функция IOCTL
;   CATEGORY - категория устройства
;   BUFFER   - буфер данных
;-----------------------------------------------------------------------------
GENERIC_IOCTL_HANDLES	MACRO HANDLE,FUNCTION,CATEGORY,BUFFER
		MOV    CH,05H
		MOV	CL,FUNCTION
		MOV	DX,OFFSET BUFFER
		MOV	BX,HANDLE
		MOV	AL,0CH
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; GENERIC_IOCTL_BLOCK - Обобщенный IOCTL для блочных устройств (функция 44h, подфункция 0Dh)
; Вход:
;   DRIVE_NUM - номер диска
;   FUNCTION  - функция IOCTL
;   CATEGORY  - категория устройства
;   PARM_BLK  - блок параметров
;-----------------------------------------------------------------------------
GENERIC_IOCTL_BLOCK	MACRO	DRIVE_NUM,FUNCTION,CATEGORY,PARM_BLK
		MOV	CH,08H
		MOV	CL,FUNCTION
		MOV	DX,OFFSET PARM_BLK - 1
		MOV	BX,DRIVE_NUM
		MOV	AL,0DH
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_GET_DRIVE_MAP - Получение карты дисков (функция 44h, подфункция 0Eh)
; Вход: LOGICAL_DRV - логический номер диска
; Выход: AL = физический номер диска
;-----------------------------------------------------------------------------
IOCTL_GET_DRIVE_MAP	MACRO	LOGICAL_DRV
		MOV	BX,LOGICAL_DRV
		MOV	AL,0EH
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; IOCTL_SET_DRIVE_MAP - Установка карты дисков (функция 44h, подфункция 0Fh)
; Вход: LOGICAL_DRV - логический номер диска
;-----------------------------------------------------------------------------
IOCTL_SET_DRIVE_MAP	MACRO	LOGICAL_DRV
		MOV	BX,LOGICAL_DRV
		MOV	AL,0FH
		@DosCall 44H
		ENDM

;-----------------------------------------------------------------------------
; XDUP - Дублирование handle (функция 45h)
; Вход: HANDLE - исходный дескриптор
; Выход: AX = новый дескриптор
;-----------------------------------------------------------------------------
XDUP		MACRO	HANDLE
		MOV	BX,HANDLE
		@DosCall 45H
		ENDM

;-----------------------------------------------------------------------------
; XDUP2 - Принудительное дублирование handle (функция 46h)
; Вход:
;   HANDLE1 - исходный дескриптор
;   HANDLE2 - новый дескриптор
;-----------------------------------------------------------------------------
XDUP2		MACRO	HANDLE1,HANDLE2
		MOV	BX,HANDLE1
		MOV	CX,HANDLE2
		@DosCall 46H
		ENDM

;-----------------------------------------------------------------------------
; GET_DIR - Получение текущего каталога (функция 47h)
; Вход:
;   DRIVE   - номер диска (0=текущий, 1=A, 2=B, ...)
;   BUFFER  - буфер для пути
;-----------------------------------------------------------------------------
GET_DIR		MACRO	DRIVE,BUFFER
		MOV	DL,DRIVE
		MOV	SI,BUFFER
		@DosCall 47H
		ENDM

;-----------------------------------------------------------------------------
; @GetDir - Получение текущего каталога с дополнительными опциями
; Вход:
;   BUFFER - буфер для пути
;   DRIVE  - номер диска
;   SEGMNT - сегмент буфера (необязательно)
;-----------------------------------------------------------------------------
@GetDir		MACRO	BUFFER, DRIVE, SEGMNT
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	DS, AX
		ENDIF

		IFNB <DRIVE>
			MOV	DL,DRIVE
		ENDIF

		IFNB <BUFFER>
			MOV	SI,BUFFER
		ENDIF

		@DosCall 47H
		ENDM

;-----------------------------------------------------------------------------
; ALLOCATE_MEMORY - Выделение памяти (функция 48h)
; Вход: BYTES - количество байт для выделения
; Выход: AX = сегмент выделенного блока
;-----------------------------------------------------------------------------
ALLOCATE_MEMORY	MACRO	BYTES
		MOV	BX,BYTES
		MOV	CL,4
		SHR	BX,CL
		INC	BX
		@DosCall 48H
		ENDM

;-----------------------------------------------------------------------------
; @GetBlok - Выделение памяти в параграфах (функция 48h)
; Вход: PARAGRAPHS - количество параграфов (16-байтных блоков)
; Выход: AX = сегмент выделенного блока
;-----------------------------------------------------------------------------
@GetBlok	MACRO	PARAGRAPHS
		IFNB	<PARAGRAPHS>
			MOV	BX, PARAGRAPHS
		ENDIF
		@DosCall 48H
		ENDM

;-----------------------------------------------------------------------------
; FREE_MEMORY - Освобождение памяти (функция 49h)
; Вход: SEG_ADDR - сегмент блока памяти
;-----------------------------------------------------------------------------
FREE_MEMORY	MACRO	SEG_ADDR
		MOV	ES,SEG_ADDR
;		MOV	ES,AX
		@DosCall 49H
		ENDM

;-----------------------------------------------------------------------------
; @FreeBlok - Освобождение памяти (функция 49h)
; Вход: SEGMNT - сегмент освобождаемого блока
;-----------------------------------------------------------------------------
@FreeBlok	MACRO	SEGMNT
		MOV	ES,SEGMNT
;		MOV	ES,AX
		@DosCall 49H
		ENDM

;-----------------------------------------------------------------------------
; SET_BLOCK - Изменение размера блока памяти (функция 4Ah)
; Вход: LAST_BYTE - последний байт резидентной части
;-----------------------------------------------------------------------------
SET_BLOCK	MACRO	LAST_BYTE
		MOV	BX,OFFSET LAST_BYTE
		MOV	CL,4
		SHR	BX,CL
		ADD	BX,17
		MOV	AH,4AH
		INT	21H
		MOV	AX,BX
		SHL	AX,CL
		DEC	AX
		MOV	SP,AX
		MOV	BP,SP
		ENDM

;-----------------------------------------------------------------------------
; @ModBlok - Изменение размера блока памяти (функция 4Ah)
; Вход:
;   PARAGRAPHS - новый размер в параграфах
;   SEGMNT     - сегмент изменяемого блока
;-----------------------------------------------------------------------------
@ModBlok	MACRO	PARAGRAPHS, SEGMNT
		IFNB	<PARAGRAPHS>
			MOV	BX, PARAGRAPHS
		ENDIF
		IFNB	<SEGMNT>
			MOV	AX, <SEGMNT>
			MOV	ES, AX
		ENDIF
		@DosCall 4AH
		ENDM

;-----------------------------------------------------------------------------
; EXEC - Запуск программы (функция 4Bh)
; Вход:
;   PATH    - путь к исполняемому файлу
;   COMMAND - командная строка
;   PARMS   - блок параметров
;-----------------------------------------------------------------------------
EXEC		MACRO	PATH, COMMAND, PARMS
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS
		MOV	WORD PTR PARMS[02H],OFFSET COMMAND
		MOV	WORD PTR PARMS[04H],CS
		MOV	WORD PTR PARMS[06H],5CH
		MOV	WORD PTR PARMS[08H],ES
		MOV	WORD PTR PARMS[0AH],6CH
		MOV	WORD PTR PARMS[0CH],ES
		MOV	AL,0
		@DosCall 4BH
		ENDM

;-----------------------------------------------------------------------------
; EXEC_OVL - Запуск оверлея (функция 4Bh)
; Вход:
;   PATH     - путь к оверлейному файлу
;   PARMS    - блок параметров
;   SEG_ADDR - сегмент для загрузки
;-----------------------------------------------------------------------------
EXEC_OVL	MACRO	PATH,PARMS,SEG_ADDR
		MOV	DX,OFFSET PATH
		MOV	BX,OFFSET PARMS
		MOV	PARMS,SEG_ADDR
		MOV	PARMS[02H],SEG_ADDR
		MOV	AL,3
		@DosCall 4BH
		ENDM

;-----------------------------------------------------------------------------
; @Exec - Универсальный запуск программы/оверлея
; Вход:
;   PATH      - путь к файлу
;   PARMS     - параметры командной строки
;   SEGPATH   - сегмент пути (необязательно)
;   SEGPARAMS - сегмент параметров (необязательно)
;   OVERLAY   - если указан, запуск в режиме оверлея
;-----------------------------------------------------------------------------
@Exec		MACRO	PATH, PARMS, SEGPATH, SEGPARAMS, OVERLAY
		IFNB <PATH>
		MOV	DX,OFFSET PATH
		ENDIF

		IFNB <PARMS>
		MOV	BX,OFFSET PARMS
		ENDIF

		IFNB <SEGPATH>
		MOV	AX, SEGPATH
		MOV	DS, AX
		ENDIF

		IFNB <SEGPARAMS>
		MOV	AX, SEGPARAMS
		MOV	ES, AX
		ENDIF

		IFB	<OVERLAY>
		XOR	AX,AX
		ELSE
		MOV	AL,3
		ENDIF
		@DosCall 4BH
		ENDM

;-----------------------------------------------------------------------------
; @Exit - Завершение программы с кодом возврата (функция 4Ch)
; Вход: RETURN - код возврата (необязательно)
;-----------------------------------------------------------------------------
@Exit		MACRO	RETURN
		IFNB <RETURN>
		IF (.TYPE (RETURN)) AND 00000100b ; Constant
			IFNB	<RETURN>
				MOV	AX,4C00H+RETURN
			ELSE
				MOV	AH,4CH
			ENDIF
		ELSE
			IFDIFI	<RETURN>, <AL>
				IF TYPE (RETURN) EQ 2
					MOV	AX, RETURN
				ELSE
					MOV	AL, RETURN
				ENDIF
			ENDIF
			MOV	AH, 4CH
		ENDIF
		ELSE
			MOV	AH, 4CH
		ENDIF
		INT	21H
		ENDM

;-----------------------------------------------------------------------------
; END_PROCESS - Завершение программы (функция 4Ch)
; Синоним для @Exit
;-----------------------------------------------------------------------------
END_PROCESS	MACRO	RETURN
		@Exit	RETURN
		ENDM

;-----------------------------------------------------------------------------
; RET_CODE - Получение кода возврата дочернего процесса (функция 4Dh)
; Выход: 
;   AL = код завершения
;   AH = причина завершения:
;        0 - нормальное
;        1 - по Ctrl-C
;        2 - аппаратная ошибка
;        3 - резидентное завершение
;-----------------------------------------------------------------------------
RET_CODE	MACRO
		@DosCall 4DH
		ENDM

;-----------------------------------------------------------------------------
; @GetRet - Получение кода возврата дочернего процесса (функция 4Dh)
; Выход: аналогично RET_CODE
;-----------------------------------------------------------------------------
@GetRet		MACRO
		@DosCall 4DH
		ENDM

;-----------------------------------------------------------------------------
; FIND_FIRST_FILE - Поиск первого файла (функция 4Eh)
; Вход:
;   PATH   - маска поиска
;   ATTRIB - атрибуты файлов
;-----------------------------------------------------------------------------
FIND_FIRST_FILE	MACRO	PATH,ATTRIB
		MOV	DX,OFFSET PATH
		MOV	CX,ATTRIB
		@DosCall 4EH
		ENDM

;-----------------------------------------------------------------------------
; @GetFirst - Поиск первого файла с дополнительными опциями
; Вход:
;   PATH   - маска поиска
;   ATTRIB - атрибуты файлов
;   SEGMNT - сегмент пути (необязательно)
;-----------------------------------------------------------------------------
@GetFirst	MACRO	PATH, ATTRIB, SEGMNT
		IFNB <SEGMNT>
		MOV	AX, SEGMNT
		MOV	DS, AX
		ENDIF
		IFNB	<PATH>
		MOV	DX, OFFSET PATH
		ENDIF
		IFNB	<ATTRIB>
			MOV	CX, ATTRIB
		ELSE
			XOR	CX, CX
		ENDIF
		@DosCall 4EH
		ENDM

;-----------------------------------------------------------------------------
; FIND_NEXT_FILE - Поиск следующего файла (функция 4Fh)
;-----------------------------------------------------------------------------
FIND_NEXT_FILE	MACRO
		@DosCall 4FH
		ENDM

;-----------------------------------------------------------------------------
; @GetNext - Поиск следующего файла (функция 4Fh)
;-----------------------------------------------------------------------------
@GetNext	MACRO
		@DosCall 4FH
		ENDM

;-----------------------------------------------------------------------------
; GET_VERIFY - Получение состояния флага верификации (функция 54h)
; Выход: AL = состояние (0 - выкл, 1 - вкл)
;-----------------------------------------------------------------------------
GET_VERIFY	MACRO
		@DosCall 54H
		ENDM

;-----------------------------------------------------------------------------
; RENAME_FILE - Переименование файла (функция 56h)
; Вход:
;   OLD_PATH - текущее имя файла
;   NEW_PATH - новое имя файла
;-----------------------------------------------------------------------------
RENAME_FILE	MACRO	OLD_PATH,NEW_PATH
		LDS	DX, OLD_PATH
		LES	DI, NEW_PATH
		@DosCall 56H
		ENDM

;-----------------------------------------------------------------------------
; @MoveFil - Переименование файла с дополнительными опциями
; Вход:
;   OLD    - текущее имя файла
;   NEW    - новое имя файла
;   SEGOLD - сегмент текущего имени
;   SEGNEW - сегмент нового имени
;-----------------------------------------------------------------------------
@MoveFil	MACRO	OLD, NEW, SEGOLD, SEGNEW
		IFNB <SEGOLD>
		MOV	AX, SEGOLD
		MOV	DS, AX
		ENDIF
		MOV	DX, OLD
		IFNB <SEGNEW>
		MOV	AX, SEGNEW
		MOV	ES, AX
		ENDIF
		MOV	DI, NEW
		@DosCall 56H
		ENDM

;-----------------------------------------------------------------------------
; LFN_RENAME_FILE - Переименование файла с длинным именем (функция 7156h)
; Вход: аналогично RENAME_FILE
;-----------------------------------------------------------------------------
LFN_RENAME_FILE	MACRO	OLD_PATH,NEW_PATH
		LDS	DX, OLD_PATH
		LES	DI, NEW_PATH
		@DosCall 7156H
		ENDM

;-----------------------------------------------------------------------------
; GET_SET_DATE_TIME - Получение/установка даты-времени файла (функция 57h)
; Вход:
;   HANDLE - дескриптор файла
;   ACTION - 0 = получить, 1 = установить
;   TIME   - новое время (для установки)
;   DATE   - новая дата (для установки)
; Выход: При получении: CX = время, DX = дата
;-----------------------------------------------------------------------------
GET_SET_DATE_TIME	MACRO	HANDLE,ACTION,TIME,DATE
		MOV	BX,HANDLE
		MOV	AL,ACTION
		MOV	CX,WORD PTR TIME
		MOV	DX,WORD PTR DATE
		@DosCall 57H
		ENDM

;-----------------------------------------------------------------------------
; ALLOC_STRAT - Установка стратегии выделения памяти (функция 58h)
; Вход:
;   CODE     - 0 = получить, 1 = установить
;   STRATEGY - новая стратегия:
;              0 - первый подходящий
;              1 - лучший подходящий
;              2 - последний подходящий
; Выход: При получении: AX = текущая стратегия
;-----------------------------------------------------------------------------
ALLOC_STRAT	MACRO	CODE,STRATEGY
		MOV	BX,STRATEGY
		MOV	AL,CODE
		@DosCall 58H
		ENDM

;-----------------------------------------------------------------------------
; GET_ERROR - Получение расширенной информации об ошибке (функция 59h)
; Выход:
;   AX = код ошибки
;   BH = класс ошибки
;   BL = рекомендуемое действие
;   CH = место ошибки
;-----------------------------------------------------------------------------
GET_ERROR	MACRO
		XOR	BX, BX
		@DosCall 59H
		ENDM

;-----------------------------------------------------------------------------
; CREATE_TEMP - Создание временного файла (функция 5Ah)
; Вход:
;   PATHNAME - путь для создания
;   ATTRIB   - атрибуты файла
; Выход: AX = handle файла
;-----------------------------------------------------------------------------
CREATE_TEMP	MACRO	PATHNAME,ATTRIB
		MOV	CX,ATTRIB
		MOV	DX,OFFSET PATHNAME
		@DosCall 5AH
		ENDM

;-----------------------------------------------------------------------------
; CREATE_NEW - Создание нового файла (функция 5Bh)
; Вход:
;   PATHNAME - путь к файлу
;   ATTRIB   - атрибуты файла
; Выход: AX = handle файла
;-----------------------------------------------------------------------------
CREATE_NEW	MACRO	PATHNAME,ATTRIB
		MOV	CX,ATTRIB
		MOV	DX,OFFSET PATHNAME
		@DosCall 5BH
		ENDM

;-----------------------------------------------------------------------------
; LOCK_FILE - Блокировка области файла (функция 5Ch)
; Вход:
;   HANDLE - дескриптор файла
;   START  - смещение начала области
;   BYTES  - размер области
;-----------------------------------------------------------------------------
LOCK_FILE	MACRO	HANDLE,START,BYTES
		MOV	BX,HANDLE
		MOV	CX,WORD PTR START
		MOV	DX,WORD PTR START+2
		MOV	SI,WORD PTR BYTES
		MOV	DI,WORD PTR BYTES+2
		MOV	AL,0
		@DosCall 5CH
		ENDM

;-----------------------------------------------------------------------------
; UNLOCK - Разблокировка области файла (функция 5Ch)
; Вход: аналогично LOCK_FILE
;-----------------------------------------------------------------------------
UNLOCK		MACRO	HANDLE,START,BYTES
		MOV	BX,HANDLE
		MOV	CX,WORD PTR START
		MOV	DX,WORD PTR START+2
		MOV	SI,WORD PTR BYTES
		MOV	DI,WORD PTR BYTES+2
		MOV	AL,1
		@DosCall 5CH
		ENDM

;-----------------------------------------------------------------------------
; GET_MACHINE_NAME - Получение имени машины в сети (функция 5Eh)
; Вход: BUFFER - буфер для имени
;-----------------------------------------------------------------------------
GET_MACHINE_NAME	MACRO	BUFFER
		MOV	DX,OFFSET BUFFER
		MOV	AL,0
		@DosCall 5EH
		ENDM

;-----------------------------------------------------------------------------
; PRINTER_SETUP - Установка строки принтера (функция 5Eh)
; Вход:
;   INDEX   - номер принтера (0-2)
;   LGTH    - длина строки
;   STRING  - строка установки
;-----------------------------------------------------------------------------
PRINTER_SETUP	MACRO	INDEX,LGTH,STRING
		MOV	BX,INDEX
		MOV	CX,LGTH
		MOV	DX,OFFSET STRING
		MOV	AL,2
		@DosCall 5EH
		ENDM

;-----------------------------------------------------------------------------
; GET_LIST - Получение списка принтеров (функция 5Fh)
; Вход:
;   INDEX   - номер принтера
;   LOCAL   - буфер для локального имени
;   REMOTE  - буфер для сетевого имени
;-----------------------------------------------------------------------------
GET_LIST	MACRO	INDEX,LOCAL,REMOTE
		MOV	BX,INDEX
		MOV	SI,OFFSET LOCAL
		MOV	DI,OFFSET REMOTE
		MOV	AL,2
		@DosCall 5FH
		ENDM

;-----------------------------------------------------------------------------
; REDIR - Перенаправление устройства (функция 5Fh)
; Вход:
;   DEVICE      - тип устройства (3=LPT, 4=DRIVE)
;   VALUE       - значение
;   SOURCE      - локальное имя
;   DESTINATION - сетевое имя
;-----------------------------------------------------------------------------
REDIR		MACRO	DEVICE,VALUE,SOURCE,DESTINATION
		MOV	BL,DEVICE
		MOV	CX,VALUE
		MOV	SI,OFFSET SOURCE
		MOV	ES,SEG DESTINATION
		MOV	DI,OFFSET DESTINATION
		MOV	AL,03H
		@DosCall 5FH
		ENDM

;-----------------------------------------------------------------------------
; CANCEL_REDIR - Отмена перенаправления (функция 5Fh)
; Вход: LOCAL - локальное имя устройства
;-----------------------------------------------------------------------------
CANCEL_REDIR	MACRO	LOCAL
		MOV	SI,OFFSET LOCAL
		MOV	AL,4
		@DosCall 5FH
		ENDM

;-----------------------------------------------------------------------------
; GET_PSP - Получение адреса PSP (функция 62h)
; Выход: BX = сегментный адрес PSP
;-----------------------------------------------------------------------------
GET_PSP		MACRO
		@DosCall 62H
		ENDM

;-----------------------------------------------------------------------------
; DISPLAY_ASCIZ - Вывод ASCIIZ-строки с переводом строки
; Вход: ASCIZ_STRING - строка, оканчивающаяся 0
;-----------------------------------------------------------------------------
DISPLAY_ASCIZ	MACRO	ASCIZ_STRING
		LOCAL	SEARCH,FOUND_IT
		MOV	BX,OFFSET ASCIZ_STRING

		SEARCH:
		CMP	BYTE PTR [BX],0
		JE	FOUND_IT
		INC	BX
		JMP SHORT SEARCH

FOUND_IT:
		MOV	BYTE PTR [BX],"$"
		DISPLAY	ASCIZ_STRING
		MOV	BYTE PTR [BX],0
		DISPLAY_CHAR	0DH
		DISPLAY_CHAR	0AH
		ENDM

;-----------------------------------------------------------------------------
; MOVE_STRING - Копирование строки
; Вход:
;   SOURCE      - исходная строка
;   DESTINATION - целевая строка
;   COUNT       - количество символов
;-----------------------------------------------------------------------------
MOVE_STRING	MACRO	SOURCE,DESTINATION,COUNT
		PUSH	ES
		PUSH	DS
		POP	ES
		ASSUME	ES:CODE
		MOV	SI,OFFSET SOURCE
		MOV	DI,OFFSET DESTINATION
		MOV	CX,COUNT
	REP	MOVS	ES:DESTINATION,SOURCE
		ASSUME	ES:NOTHING
		POP	ES
		ENDM

;-----------------------------------------------------------------------------
; CONVERT - Преобразование числа в строку
; Вход:
;   VALUE        - число для преобразования
;   BASE         - основание системы счисления
;   DESTINATION  - буфер для строки (2 символа)
;-----------------------------------------------------------------------------
CONVERT		MACRO	VALUE,BASE,DESTINATION
		LOCAL	TABLE,START
		JMP	START
TABLE		DB	"0123456789ABCDEF"

START:
		PUSH	AX
		PUSH	BX
		PUSH	DX
		MOV	AL,VALUE
		XOR	AH,AH
		XOR	BX,BX
		DIV	BASE
		MOV	BL,AL
		MOV	AL,CS:TABLE[BX]
		MOV	DESTINATION,AL
		MOV	BL,AH
		MOV	AL,CS:TABLE[BX]
		MOV	DESTINATION[1],AL
		POP	DX
		POP	BX
		POP	AX
		ENDM

;-----------------------------------------------------------------------------
; CONVERT_TO_BINARY - Преобразование строки в число
; Вход:
;   STRING - строка с числом
;   NUMBER - количество цифр
;   VALUE  - переменная для результата
;-----------------------------------------------------------------------------
CONVERT_TO_BINARY	MACRO  STRING,NUMBER,VALUE
		LOCAL	TEN,START,CALC,MULT,NO_MULT
		JMP	START
TEN		DB	10

START:
		MOV	VALUE,0
		XOR	CX,CX
		MOV	CL,NUMBER
		XOR	SI,SI

CALC:
		XOR	AX,AX
		MOV	AL,STRING[SI]
		SUB	AL,48
		CMP	CX,2
		JL	NO_MULT
		PUSH	CX
		DEC	CX

MULT:
		MUL	CS:TEN
		LOOP	MULT
		POP	CX

NO_MULT:
		ADD	VALUE,AX
		INC	SI
		LOOP	CALC
		ENDM

;-----------------------------------------------------------------------------
; CONVERT_DATE - Преобразование даты из формата DOS
; Вход: DIR_ENTRY - запись каталога
; Выход:
;   CX = год
;   DH = месяц
;   DL = день
;-----------------------------------------------------------------------------
CONVERT_DATE	MACRO	DIR_ENTRY
		MOV	DX,WORD PTR DIR_ENTRY[24]
		MOV	CL,5
		SHR	DL,CL
		MOV	DH,DIR_ENTRY[24]
		AND	DH,1FH
		XOR	CX,CX
		MOV	CL,DIR_ENTRY[25]
		SHR	CL,1
		ADD	CX,1980
		ENDM

;-----------------------------------------------------------------------------
; PACK_DATE - Упаковка даты в формат DOS
; Вход:
;   DH = день
;   DL = месяц
;   CX = год (1980-2099)
; Выход: DATE - упакованная дата
;-----------------------------------------------------------------------------
PACK_DATE	MACRO	DATE
		LOCAL	SET_BIT
;
; ON ENTRY: DH=DAY, DL=MONTH, CX=(YEAR-1980)
;
		SUB	CX,1980
		PUSH	CX
		MOV	DATE,DH
		MOV	CL,5
		SHL	DL,CL
		POP	CX
		JNC	SET_BIT
		OR	CL,80H

SET_BIT:
		OR	DATE,DL
		ROL	CL,1
		MOV	DATE[1],CL
		ENDM

;-----------------------------------------------------------------------------
; @GetKey - Расширенный ввод с клавиатуры
; Вход:
;   ECHO  - выводить символ (1/0)
;   CC    - проверять Ctrl-C (1/0)
;   CLEAR - очищать буфер клавиатуры (1/0)
; Выход: AL = введенный символ
;-----------------------------------------------------------------------------
@GetKey		MACRO	ECHO, CC, CLEAR
		IF	ECHO
			IF	CC
			MOV	AH, 01H
			ELSE
			MOV	AH, 07H
			ENDIF
		ELSE
			IF	CC
			MOV	AH, 08H
			ELSE
			MOV	AH, 07H
			ENDIF
		ENDIF
		IF	CLEAR
		MOV	AL, AH
		MOV	AH, 0CH
		ENDIF
		INT	21H
		IF	ECHO
			IF	NOT CC
			MOV	DL, AL
			@DosCall 02H
			ENDIF
		ENDIF
		ENDM

ENDIF